/* Generated by Cython 0.29.33 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/home/seanfireball1/anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/home/seanfireball1/anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/core/include/numpy/arrayscalars.h",
            "/home/seanfireball1/anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h",
            "/home/seanfireball1/anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h",
            "/home/seanfireball1/anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "/home/seanfireball1/git/funtofem/include/BeamTransfer.h",
            "/home/seanfireball1/git/funtofem/include/LinearizedMELD.h",
            "/home/seanfireball1/git/funtofem/include/MELD.h",
            "/home/seanfireball1/git/funtofem/include/MELDThermal.h",
            "/home/seanfireball1/git/funtofem/include/RBF.h",
            "/home/seanfireball1/git/funtofem/include/TransferScheme.h",
            "funtofem/mpi-compat.h"
        ],
        "include_dirs": [
            "funtofem",
            "/usr/lib/x86_64-linux-gnu/openmpi/include",
            "/usr/lib/x86_64-linux-gnu/openmpi/include/openmpi",
            "/home/seanfireball1/git/funtofem/src",
            "/home/seanfireball1/git/funtofem/include",
            "/home/seanfireball1/anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/core/include",
            "/home/seanfireball1/anaconda3/envs/F2F/lib/python3.9/site-packages/mpi4py/include"
        ],
        "language": "c++",
        "libraries": [
            "mpi_cxx",
            "mpi",
            "transfer_schemes"
        ],
        "library_dirs": [
            "/usr/lib/x86_64-linux-gnu/openmpi/lib",
            "/home/seanfireball1/git/funtofem/lib"
        ],
        "name": "funtofem.TransferScheme",
        "runtime_library_dirs": [
            "/home/seanfireball1/git/funtofem/lib"
        ],
        "sources": [
            "funtofem/TransferScheme.pyx"
        ]
    },
    "module_name": "funtofem.TransferScheme"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_33"
#define CYTHON_HEX_VERSION 0x001D21F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__funtofem__TransferScheme
#define __PYX_HAVE_API__funtofem__TransferScheme
/* Early includes */
#include "mpi.h"
#include "TransferScheme.h"
#include "MELD.h"
#include "MELDThermal.h"
#include "LinearizedMELD.h"
#include "RBF.h"
#include "BeamTransfer.h"
#include "mpi-compat.h"
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "funtofem/TransferScheme.pyx",
  "stringsource",
  "__init__.pxd",
  "MPI.pxd",
  "type.pxd",
  "funtofem/FuntofemDefs.pxi",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);


/*--- Type declarations ---*/
struct PyMPIDatatypeObject;
struct PyMPIStatusObject;
struct PyMPIRequestObject;
struct PyMPIPrequestObject;
struct PyMPIGrequestObject;
struct PyMPIMessageObject;
struct PyMPIOpObject;
struct PyMPIGroupObject;
struct PyMPIInfoObject;
struct PyMPIErrhandlerObject;
struct PyMPICommObject;
struct PyMPIIntracommObject;
struct PyMPITopocommObject;
struct PyMPICartcommObject;
struct PyMPIGraphcommObject;
struct PyMPIDistgraphcommObject;
struct PyMPIIntercommObject;
struct PyMPIWinObject;
struct PyMPIFileObject;
struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme;
struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer;
struct __pyx_obj_8funtofem_14TransferScheme_pyMELD;
struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal;
struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD;
struct __pyx_obj_8funtofem_14TransferScheme_pyRBF;
struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "mpi4py/MPI.pxd":28
 *     ctypedef MPI_Count  Count  "MPI_Count"
 * 
 * ctypedef public api class Datatype [             # <<<<<<<<<<<<<<
 *     type   PyMPIDatatype_Type,
 *     object PyMPIDatatypeObject,
 */
struct PyMPIDatatypeObject {
  PyObject_HEAD
  MPI_Datatype ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
};
typedef struct PyMPIDatatypeObject PyMPIDatatypeObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIDatatype_Type;

/* "mpi4py/MPI.pxd":36
 *     cdef object     __weakref__
 * 
 * ctypedef public api class Status [             # <<<<<<<<<<<<<<
 *     type   PyMPIStatus_Type,
 *     object PyMPIStatusObject,
 */
struct PyMPIStatusObject {
  PyObject_HEAD
  MPI_Status ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
};
typedef struct PyMPIStatusObject PyMPIStatusObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIStatus_Type;

/* "mpi4py/MPI.pxd":44
 *     cdef object   __weakref__
 * 
 * ctypedef public api class Request [             # <<<<<<<<<<<<<<
 *     type   PyMPIRequest_Type,
 *     object PyMPIRequestObject,
 */
struct PyMPIRequestObject {
  PyObject_HEAD
  MPI_Request ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
  PyObject *ob_buf;
};
typedef struct PyMPIRequestObject PyMPIRequestObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIRequest_Type;

/* "mpi4py/MPI.pxd":53
 *     cdef object      ob_buf
 * 
 * ctypedef public api class Prequest(Request) [             # <<<<<<<<<<<<<<
 *     type   PyMPIPrequest_Type,
 *     object PyMPIPrequestObject,
 */
struct PyMPIPrequestObject {
  struct PyMPIRequestObject __pyx_base;
};
typedef struct PyMPIPrequestObject PyMPIPrequestObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIPrequest_Type;

/* "mpi4py/MPI.pxd":59
 *     pass
 * 
 * ctypedef public api class Grequest(Request) [             # <<<<<<<<<<<<<<
 *     type   PyMPIGrequest_Type,
 *     object PyMPIGrequestObject,
 */
struct PyMPIGrequestObject {
  struct PyMPIRequestObject __pyx_base;
  MPI_Request ob_grequest;
};
typedef struct PyMPIGrequestObject PyMPIGrequestObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIGrequest_Type;

/* "mpi4py/MPI.pxd":65
 *     cdef MPI_Request ob_grequest
 * 
 * ctypedef public api class Message [             # <<<<<<<<<<<<<<
 *     type   PyMPIMessage_Type,
 *     object PyMPIMessageObject,
 */
struct PyMPIMessageObject {
  PyObject_HEAD
  MPI_Message ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
  PyObject *ob_buf;
};
typedef struct PyMPIMessageObject PyMPIMessageObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIMessage_Type;

/* "mpi4py/MPI.pxd":74
 *     cdef object      ob_buf
 * 
 * ctypedef public api class Op [             # <<<<<<<<<<<<<<
 *     type   PyMPIOp_Type,
 *     object PyMPIOpObject,
 */
struct PyMPIOpObject {
  PyObject_HEAD
  MPI_Op ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
  PyObject *(*ob_func)(PyObject *, PyObject *);
  int ob_usrid;
};
typedef struct PyMPIOpObject PyMPIOpObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIOp_Type;

/* "mpi4py/MPI.pxd":84
 *     cdef int      ob_usrid
 * 
 * ctypedef public api class Group [             # <<<<<<<<<<<<<<
 *     type   PyMPIGroup_Type,
 *     object PyMPIGroupObject,
 */
struct PyMPIGroupObject {
  PyObject_HEAD
  MPI_Group ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
};
typedef struct PyMPIGroupObject PyMPIGroupObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIGroup_Type;

/* "mpi4py/MPI.pxd":92
 *     cdef object  __weakref__
 * 
 * ctypedef public api class Info [             # <<<<<<<<<<<<<<
 *     type   PyMPIInfo_Type,
 *     object PyMPIInfoObject,
 */
struct PyMPIInfoObject {
  PyObject_HEAD
  MPI_Info ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
};
typedef struct PyMPIInfoObject PyMPIInfoObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIInfo_Type;

/* "mpi4py/MPI.pxd":100
 *     cdef object __weakref__
 * 
 * ctypedef public api class Errhandler [             # <<<<<<<<<<<<<<
 *     type   PyMPIErrhandler_Type,
 *     object PyMPIErrhandlerObject,
 */
struct PyMPIErrhandlerObject {
  PyObject_HEAD
  MPI_Errhandler ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
};
typedef struct PyMPIErrhandlerObject PyMPIErrhandlerObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIErrhandler_Type;

/* "mpi4py/MPI.pxd":108
 *     cdef object       __weakref__
 * 
 * ctypedef public api class Comm [             # <<<<<<<<<<<<<<
 *     type   PyMPIComm_Type,
 *     object PyMPICommObject,
 */
struct PyMPICommObject {
  PyObject_HEAD
  MPI_Comm ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
};
typedef struct PyMPICommObject PyMPICommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIComm_Type;

/* "mpi4py/MPI.pxd":116
 *     cdef object __weakref__
 * 
 * ctypedef public api class Intracomm(Comm) [             # <<<<<<<<<<<<<<
 *     type   PyMPIIntracomm_Type,
 *     object PyMPIIntracommObject,
 */
struct PyMPIIntracommObject {
  struct PyMPICommObject __pyx_base;
};
typedef struct PyMPIIntracommObject PyMPIIntracommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIIntracomm_Type;

/* "mpi4py/MPI.pxd":122
 *     pass
 * 
 * ctypedef public api class Topocomm(Intracomm) [             # <<<<<<<<<<<<<<
 *     type   PyMPITopocomm_Type,
 *     object PyMPITopocommObject,
 */
struct PyMPITopocommObject {
  struct PyMPIIntracommObject __pyx_base;
};
typedef struct PyMPITopocommObject PyMPITopocommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPITopocomm_Type;

/* "mpi4py/MPI.pxd":128
 *     pass
 * 
 * ctypedef public api class Cartcomm(Topocomm) [             # <<<<<<<<<<<<<<
 *     type   PyMPICartcomm_Type,
 *     object PyMPICartcommObject,
 */
struct PyMPICartcommObject {
  struct PyMPITopocommObject __pyx_base;
};
typedef struct PyMPICartcommObject PyMPICartcommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPICartcomm_Type;

/* "mpi4py/MPI.pxd":134
 *     pass
 * 
 * ctypedef public api class Graphcomm(Topocomm) [             # <<<<<<<<<<<<<<
 *     type   PyMPIGraphcomm_Type,
 *     object PyMPIGraphcommObject,
 */
struct PyMPIGraphcommObject {
  struct PyMPITopocommObject __pyx_base;
};
typedef struct PyMPIGraphcommObject PyMPIGraphcommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIGraphcomm_Type;

/* "mpi4py/MPI.pxd":140
 *     pass
 * 
 * ctypedef public api class Distgraphcomm(Topocomm) [             # <<<<<<<<<<<<<<
 *     type   PyMPIDistgraphcomm_Type,
 *     object PyMPIDistgraphcommObject,
 */
struct PyMPIDistgraphcommObject {
  struct PyMPITopocommObject __pyx_base;
};
typedef struct PyMPIDistgraphcommObject PyMPIDistgraphcommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIDistgraphcomm_Type;

/* "mpi4py/MPI.pxd":146
 *     pass
 * 
 * ctypedef public api class Intercomm(Comm) [             # <<<<<<<<<<<<<<
 *     type   PyMPIIntercomm_Type,
 *     object PyMPIIntercommObject,
 */
struct PyMPIIntercommObject {
  struct PyMPICommObject __pyx_base;
};
typedef struct PyMPIIntercommObject PyMPIIntercommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIIntercomm_Type;

/* "mpi4py/MPI.pxd":152
 *     pass
 * 
 * ctypedef public api class Win [             # <<<<<<<<<<<<<<
 *     type   PyMPIWin_Type,
 *     object PyMPIWinObject,
 */
struct PyMPIWinObject {
  PyObject_HEAD
  MPI_Win ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
  PyObject *ob_mem;
};
typedef struct PyMPIWinObject PyMPIWinObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIWin_Type;

/* "mpi4py/MPI.pxd":161
 *     cdef object   ob_mem
 * 
 * ctypedef public api class File [             # <<<<<<<<<<<<<<
 *     type   PyMPIFile_Type,
 *     object PyMPIFileObject,
 */
struct PyMPIFileObject {
  PyObject_HEAD
  MPI_File ob_mpi;
  unsigned int flags;
  PyObject *__weakref__;
};
typedef struct PyMPIFileObject PyMPIFileObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyMPIFile_Type;

/* "funtofem/TransferScheme.pyx":27
 * 
 * # Wrap the transfer scheme class and its functions
 * cdef class pyTransferScheme:             # <<<<<<<<<<<<<<
 *     """
 *     Abstract class that defines the transfer scheme interface
 */
struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme {
  PyObject_HEAD
  LDTransferScheme *ptr;
};


/* "funtofem/TransferScheme.pyx":610
 * 
 * # Generic thermal transfer scheme
 * cdef class pyThermalTransfer:             # <<<<<<<<<<<<<<
 *     """
 *     Abstract class that defines the transfer scheme interface
 */
struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer {
  PyObject_HEAD
  ThermalTransfer *ptr;
};


/* "funtofem/TransferScheme.pyx":843
 * 
 * 
 * cdef class pyMELD(pyTransferScheme):             # <<<<<<<<<<<<<<
 *     """
 *     MELD (Matching-based Extrapolation of Loads and Displacments) is scalable
 */
struct __pyx_obj_8funtofem_14TransferScheme_pyMELD {
  struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme __pyx_base;
};


/* "funtofem/TransferScheme.pyx":893
 *         del self.ptr
 * 
 * cdef class pyMELDThermal(pyThermalTransfer):             # <<<<<<<<<<<<<<
 *     """
 *     MELD (Matching-based Extrapolation of Loads and Displacments) is scalable
 */
struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal {
  struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer __pyx_base;
};


/* "funtofem/TransferScheme.pyx":945
 *         del self.ptr
 * 
 * cdef class pyLinearizedMELD(pyTransferScheme):             # <<<<<<<<<<<<<<
 *     """
 *     Linearized MELD is a transfer scheme developed from the MELD transfer scheme
 */
struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD {
  struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme __pyx_base;
};


/* "funtofem/TransferScheme.pyx":993
 * PY_THIN_PLATE_SPLINE = THIN_PLATE_SPLINE
 * 
 * cdef class pyRBF(pyTransferScheme):             # <<<<<<<<<<<<<<
 *     """
 *     Interpolation of loads and displacements using radial basis functions (RBFs)
 */
struct __pyx_obj_8funtofem_14TransferScheme_pyRBF {
  struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme __pyx_base;
};


/* "funtofem/TransferScheme.pyx":1050
 *         del self.ptr
 * 
 * cdef class pyBeamTransfer(pyTransferScheme):             # <<<<<<<<<<<<<<
 *     """
 *     Interpolation of loads and displacements for beam elements
 */
struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer {
  struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme __pyx_base;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* FromPy.proto */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__RBF_3a__3a_RbfType(enum RBF::RbfType value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum RBF::RbfType __Pyx_PyInt_As_enum__RBF_3a__3a_RbfType(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'mpi4py.libmpi' */

/* Module declarations from 'mpi4py.MPI' */
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Datatype = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Status = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Request = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Prequest = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Grequest = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Message = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Op = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Group = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Info = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Errhandler = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Comm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Intracomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Topocomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Cartcomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Graphcomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Distgraphcomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Intercomm = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_Win = 0;
static PyTypeObject *__pyx_ptype_6mpi4py_3MPI_File = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from 'funtofem.TransferScheme' */
static PyTypeObject *__pyx_ptype_8funtofem_14TransferScheme_pyTransferScheme = 0;
static PyTypeObject *__pyx_ptype_8funtofem_14TransferScheme_pyThermalTransfer = 0;
static PyTypeObject *__pyx_ptype_8funtofem_14TransferScheme_pyMELD = 0;
static PyTypeObject *__pyx_ptype_8funtofem_14TransferScheme_pyMELDThermal = 0;
static PyTypeObject *__pyx_ptype_8funtofem_14TransferScheme_pyLinearizedMELD = 0;
static PyTypeObject *__pyx_ptype_8funtofem_14TransferScheme_pyRBF = 0;
static PyTypeObject *__pyx_ptype_8funtofem_14TransferScheme_pyBeamTransfer = 0;
static __Pyx_TypeInfo __Pyx_TypeInfo___pyx_t_double_complex = { "double complex", NULL, sizeof(__pyx_t_double_complex), { 0 }, 0, 'C', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
#define __Pyx_MODULE_NAME "funtofem.TransferScheme"
extern int __pyx_module_is_main_funtofem__TransferScheme;
int __pyx_module_is_main_funtofem__TransferScheme = 0;

/* Implementation of 'funtofem.TransferScheme' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_R[] = "R";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_aero[] = "aero";
static const char __pyx_k_atol[] = "atol";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_comm[] = "comm";
static const char __pyx_k_conn[] = "conn";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_rtol[] = "rtol";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_vecs[] = "vecs";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_prods[] = "prods";
static const char __pyx_k_pyRBF[] = "pyRBF";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_pyMELD[] = "pyMELD";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_rbf_type[] = "rbf_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_symmetry[] = "symmetry";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_aero_flux[] = "aero_flux";
static const char __pyx_k_aero_root[] = "aero_root";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_aero_disps[] = "aero_disps";
static const char __pyx_k_aero_loads[] = "aero_loads";
static const char __pyx_k_aero_temps[] = "aero_temps";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PY_GAUSSIAN[] = "PY_GAUSSIAN";
static const char __pyx_k_num_nearest[] = "num_nearest";
static const char __pyx_k_struct_flux[] = "struct_flux";
static const char __pyx_k_struct_root[] = "struct_root";
static const char __pyx_k_dof_per_node[] = "dof_per_node";
static const char __pyx_k_struct_disps[] = "struct_disps";
static const char __pyx_k_struct_loads[] = "struct_loads";
static const char __pyx_k_struct_temps[] = "struct_temps";
static const char __pyx_k_pyMELDThermal[] = "pyMELDThermal";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_F2F_NPY_SCALAR[] = "F2F_NPY_SCALAR";
static const char __pyx_k_pyBeamTransfer[] = "pyBeamTransfer";
static const char __pyx_k_sampling_ratio[] = "sampling_ratio";
static const char __pyx_k_PY_MULTIQUADRIC[] = "PY_MULTIQUADRIC";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_pyLinearizedMELD[] = "pyLinearizedMELD";
static const char __pyx_k_pyTransferScheme[] = "pyTransferScheme";
static const char __pyx_k_pyThermalTransfer[] = "pyThermalTransfer";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_PY_THIN_PLATE_SPLINE[] = "PY_THIN_PLATE_SPLINE";
static const char __pyx_k_PY_INVERSE_MULTIQUADRIC[] = "PY_INVERSE_MULTIQUADRIC";
static const char __pyx_k_Structural_node_array_incorrect[] = "Structural node array incorrect length";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_self_ptr_cannot_be_converted_to[] = "self.ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_Aerodynamic_array_incorrect_leng[] = "Aerodynamic array incorrect length";
static const char __pyx_k_Aerodynamic_node_array_incorrect[] = "Aerodynamic node array incorrect length";
static const char __pyx_k_Input_structural_array_incorrect[] = "Input structural array incorrect length";
static const char __pyx_k_Output_structural_array_incorrec[] = "Output structural array incorrect length";
static const char __pyx_k_Structural_array_incorrect_lengt[] = "Structural array incorrect length";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static PyObject *__pyx_kp_s_Aerodynamic_array_incorrect_leng;
static PyObject *__pyx_kp_s_Aerodynamic_node_array_incorrect;
static PyObject *__pyx_n_s_F2F_NPY_SCALAR;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Input_structural_array_incorrect;
static PyObject *__pyx_kp_s_Output_structural_array_incorrec;
static PyObject *__pyx_n_s_PY_GAUSSIAN;
static PyObject *__pyx_n_s_PY_INVERSE_MULTIQUADRIC;
static PyObject *__pyx_n_s_PY_MULTIQUADRIC;
static PyObject *__pyx_n_s_PY_THIN_PLATE_SPLINE;
static PyObject *__pyx_n_s_R;
static PyObject *__pyx_kp_s_Structural_array_incorrect_lengt;
static PyObject *__pyx_kp_s_Structural_node_array_incorrect;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_aero;
static PyObject *__pyx_n_s_aero_disps;
static PyObject *__pyx_n_s_aero_flux;
static PyObject *__pyx_n_s_aero_loads;
static PyObject *__pyx_n_s_aero_root;
static PyObject *__pyx_n_s_aero_temps;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_atol;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_comm;
static PyObject *__pyx_n_s_conn;
static PyObject *__pyx_n_s_dof_per_node;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_num_nearest;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_prods;
static PyObject *__pyx_n_s_pyBeamTransfer;
static PyObject *__pyx_n_s_pyLinearizedMELD;
static PyObject *__pyx_n_s_pyMELD;
static PyObject *__pyx_n_s_pyMELDThermal;
static PyObject *__pyx_n_s_pyRBF;
static PyObject *__pyx_n_s_pyThermalTransfer;
static PyObject *__pyx_n_s_pyTransferScheme;
static PyObject *__pyx_n_s_rbf_type;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_rtol;
static PyObject *__pyx_n_s_sampling_ratio;
static PyObject *__pyx_kp_s_self_ptr_cannot_be_converted_to;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_struct_disps;
static PyObject *__pyx_n_s_struct_flux;
static PyObject *__pyx_n_s_struct_loads;
static PyObject *__pyx_n_s_struct_root;
static PyObject *__pyx_n_s_struct_temps;
static PyObject *__pyx_n_s_symmetry;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_vecs;
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_setAeroNodes(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_X); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_2setStructNodes(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_X); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_4initialize(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_6transferDisps(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_struct_disps, PyArrayObject *__pyx_v_aero_disps); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_8transferLoads(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_aero_loads, PyArrayObject *__pyx_v_struct_loads); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_10applydDduS(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_12applydDduSTrans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_14applydLduS(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_16applydLduSTrans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_18applydLdfA(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_20applydLdfATrans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_22applydDdxA0(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_24applydDdxS0(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_26applydLdxA0(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_28applydLdxS0(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_30testAllDerivatives(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_struct_disps, PyArrayObject *__pyx_v_aero_loads, __pyx_t_double_complex __pyx_v_h, double __pyx_v_rtol, double __pyx_v_atol); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_32transformEquivRigidMotion(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_aero_disps, PyArrayObject *__pyx_v_R, PyArrayObject *__pyx_v_t, PyArrayObject *__pyx_v_u); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_34applydRduATrans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_vecs, PyArrayObject *__pyx_v_prods); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_36applydRdxA0Trans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_aero_disps, PyArrayObject *__pyx_v_vecs, PyArrayObject *__pyx_v_prods); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_setAeroNodes(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_X); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_2setStructNodes(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_X); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_4initialize(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_6transferTemp(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_struct_temps, PyArrayObject *__pyx_v_aero_temps); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_8transferFlux(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_aero_flux, PyArrayObject *__pyx_v_struct_flux); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_10applydTdtS(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_12applydTdtSTrans(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_14applydQdqA(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_16applydQdqATrans(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_18testAllDerivatives(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_struct_disps, PyArrayObject *__pyx_v_aero_loads, __pyx_t_double_complex __pyx_v_h, double __pyx_v_rtol, double __pyx_v_atol); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8funtofem_14TransferScheme_6pyMELD___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, int __pyx_v_symmetry, int __pyx_v_num_nearest, __pyx_t_double_complex __pyx_v_beta); /* proto */
static void __pyx_pf_8funtofem_14TransferScheme_6pyMELD_2__dealloc__(struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_6pyMELD_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_6pyMELD_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, int __pyx_v_symmetry, int __pyx_v_num_nearest, __pyx_t_double_complex __pyx_v_beta); /* proto */
static void __pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal_2__dealloc__(struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, int __pyx_v_symmetry, int __pyx_v_num_nearest, __pyx_t_double_complex __pyx_v_beta); /* proto */
static void __pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD_2__dealloc__(struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8funtofem_14TransferScheme_5pyRBF___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, enum RBF::RbfType __pyx_v_rbf_type, int __pyx_v_sampling_ratio); /* proto */
static void __pyx_pf_8funtofem_14TransferScheme_5pyRBF_2__dealloc__(struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_5pyRBF_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_5pyRBF_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8funtofem_14TransferScheme_14pyBeamTransfer___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, PyArrayObject *__pyx_v_conn, int __pyx_v_dof_per_node); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_14pyBeamTransfer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8funtofem_14TransferScheme_14pyBeamTransfer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyTransferScheme(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyThermalTransfer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyMELD(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyMELDThermal(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyLinearizedMELD(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyRBF(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyBeamTransfer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
/* Late includes */

/* "funtofem/TransferScheme.pyx":38
 *     cdef LDTransferScheme *ptr
 * 
 *     def setAeroNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):             # <<<<<<<<<<<<<<
 *         """
 *         Set and store the aerodynamic surface node locations in memory
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_1setAeroNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_setAeroNodes[] = "\n        Set and store the aerodynamic surface node locations in memory\n\n        Parameters\n        ----------\n        X: ndarray\n            One-dimensional array of aerodynamic surface node locations\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_1setAeroNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAeroNodes (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X), __pyx_ptype_5numpy_ndarray, 1, "X", 0))) __PYX_ERR(0, 38, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_setAeroNodes(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), ((PyArrayObject *)__pyx_v_X));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_setAeroNodes(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_X) {
  int __pyx_v_nnodes;
  __pyx_t_double_complex *__pyx_v_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_X;
  __Pyx_Buffer __pyx_pybuffer_X;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAeroNodes", 0);
  __pyx_pybuffer_X.pybuffer.buf = NULL;
  __pyx_pybuffer_X.refcount = 0;
  __pyx_pybuffernd_X.data = NULL;
  __pyx_pybuffernd_X.rcbuffer = &__pyx_pybuffer_X;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X.rcbuffer->pybuffer, (PyObject*)__pyx_v_X, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 38, __pyx_L1_error)
  }
  __pyx_pybuffernd_X.diminfo[0].strides = __pyx_pybuffernd_X.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X.diminfo[0].shape = __pyx_pybuffernd_X.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":47
 *             One-dimensional array of aerodynamic surface node locations
 *         """
 *         cdef int nnodes = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *array = NULL
 *         if X is not None:
 */
  __pyx_v_nnodes = 0;

  /* "funtofem/TransferScheme.pyx":48
 *         """
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL             # <<<<<<<<<<<<<<
 *         if X is not None:
 *             nnodes = int(len(X)//3)
 */
  __pyx_v_array = NULL;

  /* "funtofem/TransferScheme.pyx":49
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL
 *         if X is not None:             # <<<<<<<<<<<<<<
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_X) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":50
 *         cdef F2FScalar *array = NULL
 *         if X is not None:
 *             nnodes = int(len(X)//3)             # <<<<<<<<<<<<<<
 *             array = <F2FScalar*>X.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_X)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 50, __pyx_L1_error)
    __pyx_v_nnodes = ((int)__Pyx_div_Py_ssize_t(__pyx_t_3, 3));

    /* "funtofem/TransferScheme.pyx":51
 *         if X is not None:
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.setAeroNodes(array, nnodes)
 */
    __pyx_v_array = ((__pyx_t_double_complex *)__pyx_v_X->data);

    /* "funtofem/TransferScheme.pyx":49
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL
 *         if X is not None:             # <<<<<<<<<<<<<<
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data
 */
  }

  /* "funtofem/TransferScheme.pyx":53
 *             array = <F2FScalar*>X.data
 * 
 *         self.ptr.setAeroNodes(array, nnodes)             # <<<<<<<<<<<<<<
 * 
 *         return
 */
  __pyx_v_self->ptr->setAeroNodes(__pyx_v_array, __pyx_v_nnodes);

  /* "funtofem/TransferScheme.pyx":55
 *         self.ptr.setAeroNodes(array, nnodes)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def setStructNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":38
 *     cdef LDTransferScheme *ptr
 * 
 *     def setAeroNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):             # <<<<<<<<<<<<<<
 *         """
 *         Set and store the aerodynamic surface node locations in memory
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.setAeroNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":57
 *         return
 * 
 *     def setStructNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):             # <<<<<<<<<<<<<<
 *         """
 *         Set and store the structural node locations in memory
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_3setStructNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_2setStructNodes[] = "\n        Set and store the structural node locations in memory\n\n        Parameters\n        ----------\n        X: ndarray\n            One-dimensional array of structural node locations\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_3setStructNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setStructNodes (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X), __pyx_ptype_5numpy_ndarray, 1, "X", 0))) __PYX_ERR(0, 57, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_2setStructNodes(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), ((PyArrayObject *)__pyx_v_X));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_2setStructNodes(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_X) {
  int __pyx_v_nnodes;
  __pyx_t_double_complex *__pyx_v_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_X;
  __Pyx_Buffer __pyx_pybuffer_X;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setStructNodes", 0);
  __pyx_pybuffer_X.pybuffer.buf = NULL;
  __pyx_pybuffer_X.refcount = 0;
  __pyx_pybuffernd_X.data = NULL;
  __pyx_pybuffernd_X.rcbuffer = &__pyx_pybuffer_X;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X.rcbuffer->pybuffer, (PyObject*)__pyx_v_X, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 57, __pyx_L1_error)
  }
  __pyx_pybuffernd_X.diminfo[0].strides = __pyx_pybuffernd_X.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X.diminfo[0].shape = __pyx_pybuffernd_X.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":66
 *             One-dimensional array of structural node locations
 *         """
 *         cdef int nnodes = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *array = NULL
 *         if X is not None:
 */
  __pyx_v_nnodes = 0;

  /* "funtofem/TransferScheme.pyx":67
 *         """
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL             # <<<<<<<<<<<<<<
 *         if X is not None:
 *             nnodes = int(len(X)//3)
 */
  __pyx_v_array = NULL;

  /* "funtofem/TransferScheme.pyx":68
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL
 *         if X is not None:             # <<<<<<<<<<<<<<
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_X) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":69
 *         cdef F2FScalar *array = NULL
 *         if X is not None:
 *             nnodes = int(len(X)//3)             # <<<<<<<<<<<<<<
 *             array = <F2FScalar*>X.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_X)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 69, __pyx_L1_error)
    __pyx_v_nnodes = ((int)__Pyx_div_Py_ssize_t(__pyx_t_3, 3));

    /* "funtofem/TransferScheme.pyx":70
 *         if X is not None:
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.setStructNodes(array, nnodes)
 */
    __pyx_v_array = ((__pyx_t_double_complex *)__pyx_v_X->data);

    /* "funtofem/TransferScheme.pyx":68
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL
 *         if X is not None:             # <<<<<<<<<<<<<<
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data
 */
  }

  /* "funtofem/TransferScheme.pyx":72
 *             array = <F2FScalar*>X.data
 * 
 *         self.ptr.setStructNodes(array, nnodes)             # <<<<<<<<<<<<<<
 * 
 *         return
 */
  __pyx_v_self->ptr->setStructNodes(__pyx_v_array, __pyx_v_nnodes);

  /* "funtofem/TransferScheme.pyx":74
 *         self.ptr.setStructNodes(array, nnodes)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":57
 *         return
 * 
 *     def setStructNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):             # <<<<<<<<<<<<<<
 *         """
 *         Set and store the structural node locations in memory
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.setStructNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":76
 *         return
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Run routines (e.g. building connectivity through search, assembling
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_5initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_4initialize[] = "\n        Run routines (e.g. building connectivity through search, assembling\n        interpolation matrix, etc.) necessary to prepare transfer scheme to\n        perform load and displacement transfer\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_5initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_4initialize(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_4initialize(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "funtofem/TransferScheme.pyx":82
 *         perform load and displacement transfer
 *         """
 *         self.ptr.initialize()             # <<<<<<<<<<<<<<
 * 
 *         return
 */
  __pyx_v_self->ptr->initialize();

  /* "funtofem/TransferScheme.pyx":84
 *         self.ptr.initialize()
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def transferDisps(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":76
 *         return
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Run routines (e.g. building connectivity through search, assembling
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":86
 *         return
 * 
 *     def transferDisps(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_disps,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_disps):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_7transferDisps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_6transferDisps[] = "\n        Convert the input structural node displacements into aerodynamic\n        surface node displacements and store in empty input array\n\n        Parameters\n        ----------\n        struct_disps: ndarray\n            One-dimensional array of structural displacements\n        aero_disps: ndarray\n            One-dimensional empty array of size of aerodynamic displacements\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_7transferDisps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_struct_disps = 0;
  PyArrayObject *__pyx_v_aero_disps = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transferDisps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_struct_disps,&__pyx_n_s_aero_disps,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_disps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_disps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transferDisps", 1, 2, 2, 1); __PYX_ERR(0, 86, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transferDisps") < 0)) __PYX_ERR(0, 86, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_struct_disps = ((PyArrayObject *)values[0]);
    __pyx_v_aero_disps = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transferDisps", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 86, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.transferDisps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct_disps), __pyx_ptype_5numpy_ndarray, 1, "struct_disps", 0))) __PYX_ERR(0, 87, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero_disps), __pyx_ptype_5numpy_ndarray, 1, "aero_disps", 0))) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_6transferDisps(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_struct_disps, __pyx_v_aero_disps);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_6transferDisps(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_struct_disps, PyArrayObject *__pyx_v_aero_disps) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_aero_disps;
  __Pyx_Buffer __pyx_pybuffer_aero_disps;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_struct_disps;
  __Pyx_Buffer __pyx_pybuffer_struct_disps;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transferDisps", 0);
  __pyx_pybuffer_struct_disps.pybuffer.buf = NULL;
  __pyx_pybuffer_struct_disps.refcount = 0;
  __pyx_pybuffernd_struct_disps.data = NULL;
  __pyx_pybuffernd_struct_disps.rcbuffer = &__pyx_pybuffer_struct_disps;
  __pyx_pybuffer_aero_disps.pybuffer.buf = NULL;
  __pyx_pybuffer_aero_disps.refcount = 0;
  __pyx_pybuffernd_aero_disps.data = NULL;
  __pyx_pybuffernd_aero_disps.rcbuffer = &__pyx_pybuffer_aero_disps;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_struct_disps.rcbuffer->pybuffer, (PyObject*)__pyx_v_struct_disps, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 86, __pyx_L1_error)
  }
  __pyx_pybuffernd_struct_disps.diminfo[0].strides = __pyx_pybuffernd_struct_disps.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_struct_disps.diminfo[0].shape = __pyx_pybuffernd_struct_disps.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_aero_disps.rcbuffer->pybuffer, (PyObject*)__pyx_v_aero_disps, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 86, __pyx_L1_error)
  }
  __pyx_pybuffernd_aero_disps.diminfo[0].strides = __pyx_pybuffernd_aero_disps.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_aero_disps.diminfo[0].shape = __pyx_pybuffernd_aero_disps.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":100
 *             One-dimensional empty array of size of aerodynamic displacements
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":101
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":102
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if struct_disps is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":103
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if struct_disps is not None:
 *             struct_len = len(struct_disps)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":104
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_disps is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_struct_disps) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":105
 *         cdef int aero_len = 0
 *         if struct_disps is not None:
 *             struct_len = len(struct_disps)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_disps is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_struct_disps)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 105, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":106
 *         if struct_disps is not None:
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data             # <<<<<<<<<<<<<<
 *         if aero_disps is not None:
 *             aero_len = len(aero_disps)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_struct_disps->data);

    /* "funtofem/TransferScheme.pyx":104
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_disps is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 */
  }

  /* "funtofem/TransferScheme.pyx":107
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_disps is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_disps)
 *             aero_array = <F2FScalar*>aero_disps.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_aero_disps) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":108
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_disps is not None:
 *             aero_len = len(aero_disps)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>aero_disps.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_aero_disps)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 108, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":109
 *         if aero_disps is not None:
 *             aero_len = len(aero_disps)
 *             aero_array = <F2FScalar*>aero_disps.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_aero_disps->data);

    /* "funtofem/TransferScheme.pyx":107
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_disps is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_disps)
 *             aero_array = <F2FScalar*>aero_disps.data
 */
  }

  /* "funtofem/TransferScheme.pyx":111
 *             aero_array = <F2FScalar*>aero_disps.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":112
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 112, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":111
 *             aero_array = <F2FScalar*>aero_disps.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":113
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":114
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.transferDisps(struct_array, aero_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 114, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":113
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":116
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 *         self.ptr.transferDisps(struct_array, aero_array)             # <<<<<<<<<<<<<<
 * 
 *         return
 */
  __pyx_v_self->ptr->transferDisps(__pyx_v_struct_array, __pyx_v_aero_array);

  /* "funtofem/TransferScheme.pyx":118
 *         self.ptr.transferDisps(struct_array, aero_array)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def transferLoads(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":86
 *         return
 * 
 *     def transferDisps(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_disps,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_disps):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_disps.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_disps.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.transferDisps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_disps.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_disps.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":120
 *         return
 * 
 *     def transferLoads(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_loads,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_loads):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_9transferLoads(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_8transferLoads[] = "\n        Convert the input aerodynamic surface loads into structural loads and\n        store in empty input array\n\n        Parameters\n        ----------\n        aero_loads: ndarray\n            One-dimensional array of aerodynamic surface loads\n        struct_loads: ndarray\n            One-dimensional empty array of size of structural loads\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_9transferLoads(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_aero_loads = 0;
  PyArrayObject *__pyx_v_struct_loads = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transferLoads (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aero_loads,&__pyx_n_s_struct_loads,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_loads)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_loads)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transferLoads", 1, 2, 2, 1); __PYX_ERR(0, 120, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transferLoads") < 0)) __PYX_ERR(0, 120, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_aero_loads = ((PyArrayObject *)values[0]);
    __pyx_v_struct_loads = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transferLoads", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.transferLoads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero_loads), __pyx_ptype_5numpy_ndarray, 1, "aero_loads", 0))) __PYX_ERR(0, 121, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct_loads), __pyx_ptype_5numpy_ndarray, 1, "struct_loads", 0))) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_8transferLoads(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_aero_loads, __pyx_v_struct_loads);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_8transferLoads(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_aero_loads, PyArrayObject *__pyx_v_struct_loads) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_aero_loads;
  __Pyx_Buffer __pyx_pybuffer_aero_loads;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_struct_loads;
  __Pyx_Buffer __pyx_pybuffer_struct_loads;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transferLoads", 0);
  __pyx_pybuffer_aero_loads.pybuffer.buf = NULL;
  __pyx_pybuffer_aero_loads.refcount = 0;
  __pyx_pybuffernd_aero_loads.data = NULL;
  __pyx_pybuffernd_aero_loads.rcbuffer = &__pyx_pybuffer_aero_loads;
  __pyx_pybuffer_struct_loads.pybuffer.buf = NULL;
  __pyx_pybuffer_struct_loads.refcount = 0;
  __pyx_pybuffernd_struct_loads.data = NULL;
  __pyx_pybuffernd_struct_loads.rcbuffer = &__pyx_pybuffer_struct_loads;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_aero_loads.rcbuffer->pybuffer, (PyObject*)__pyx_v_aero_loads, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 120, __pyx_L1_error)
  }
  __pyx_pybuffernd_aero_loads.diminfo[0].strides = __pyx_pybuffernd_aero_loads.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_aero_loads.diminfo[0].shape = __pyx_pybuffernd_aero_loads.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_struct_loads.rcbuffer->pybuffer, (PyObject*)__pyx_v_struct_loads, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 120, __pyx_L1_error)
  }
  __pyx_pybuffernd_struct_loads.diminfo[0].strides = __pyx_pybuffernd_struct_loads.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_struct_loads.diminfo[0].shape = __pyx_pybuffernd_struct_loads.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":134
 *             One-dimensional empty array of size of structural loads
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":135
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":136
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if struct_loads is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":137
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if struct_loads is not None:
 *             struct_len = len(struct_loads)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":138
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_loads is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_loads)
 *             struct_array = <F2FScalar*>struct_loads.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_struct_loads) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":139
 *         cdef int aero_len = 0
 *         if struct_loads is not None:
 *             struct_len = len(struct_loads)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>struct_loads.data
 *         if aero_loads is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_struct_loads)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 139, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":140
 *         if struct_loads is not None:
 *             struct_len = len(struct_loads)
 *             struct_array = <F2FScalar*>struct_loads.data             # <<<<<<<<<<<<<<
 *         if aero_loads is not None:
 *             aero_len = len(aero_loads)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_struct_loads->data);

    /* "funtofem/TransferScheme.pyx":138
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_loads is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_loads)
 *             struct_array = <F2FScalar*>struct_loads.data
 */
  }

  /* "funtofem/TransferScheme.pyx":141
 *             struct_len = len(struct_loads)
 *             struct_array = <F2FScalar*>struct_loads.data
 *         if aero_loads is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_loads)
 *             aero_array = <F2FScalar*>aero_loads.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_aero_loads) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":142
 *             struct_array = <F2FScalar*>struct_loads.data
 *         if aero_loads is not None:
 *             aero_len = len(aero_loads)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>aero_loads.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_aero_loads)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 142, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":143
 *         if aero_loads is not None:
 *             aero_len = len(aero_loads)
 *             aero_array = <F2FScalar*>aero_loads.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_aero_loads->data);

    /* "funtofem/TransferScheme.pyx":141
 *             struct_len = len(struct_loads)
 *             struct_array = <F2FScalar*>struct_loads.data
 *         if aero_loads is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_loads)
 *             aero_array = <F2FScalar*>aero_loads.data
 */
  }

  /* "funtofem/TransferScheme.pyx":145
 *             aero_array = <F2FScalar*>aero_loads.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":146
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 146, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":145
 *             aero_array = <F2FScalar*>aero_loads.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":147
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":148
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.transferLoads(aero_array, struct_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 148, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":147
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":150
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 *         self.ptr.transferLoads(aero_array, struct_array)             # <<<<<<<<<<<<<<
 * 
 *         return
 */
  __pyx_v_self->ptr->transferLoads(__pyx_v_aero_array, __pyx_v_struct_array);

  /* "funtofem/TransferScheme.pyx":152
 *         self.ptr.transferLoads(aero_array, struct_array)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydDduS(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":120
 *         return
 * 
 *     def transferLoads(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_loads,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_loads):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_loads.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_loads.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.transferLoads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_loads.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_loads.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":154
 *         return
 * 
 *     def applydDduS(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_11applydDduS(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_10applydDduS[] = "\n        Apply the action of the Jacobian containing the derivatives of the\n        displacement transfer residuals with respect to the structural\n        displacements to an input vector and stores the products in empty\n        input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of structural displacements\n        p: ndarray\n            One-dimensional empty array of size of aerodynamic displacements\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_11applydDduS(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydDduS (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydDduS", 1, 2, 2, 1); __PYX_ERR(0, 154, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydDduS") < 0)) __PYX_ERR(0, 154, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydDduS", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 154, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydDduS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 154, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 155, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_10applydDduS(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_10applydDduS(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydDduS", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 154, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 154, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":169
 *             One-dimensional empty array of size of aerodynamic displacements
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":170
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":171
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if v is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":172
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             struct_len = len(v)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":173
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":174
 *         cdef int aero_len = 0
 *         if v is not None:
 *             struct_len = len(v)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 174, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":175
 *         if v is not None:
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             aero_len = len(p)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":173
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":176
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(p)
 *             aero_array = <F2FScalar*>p.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":177
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:
 *             aero_len = len(p)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>p.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 177, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":178
 *         if p is not None:
 *             aero_len = len(p)
 *             aero_array = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":176
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(p)
 *             aero_array = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":180
 *             aero_array = <F2FScalar*>p.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":181
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 181, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":180
 *             aero_array = <F2FScalar*>p.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":182
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":183
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydDduS(struct_array, aero_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 183, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":182
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":185
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 *         self.ptr.applydDduS(struct_array, aero_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydDduS(__pyx_v_struct_array, __pyx_v_aero_array);

  /* "funtofem/TransferScheme.pyx":186
 * 
 *         self.ptr.applydDduS(struct_array, aero_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydDduSTrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":154
 *         return
 * 
 *     def applydDduS(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydDduS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":188
 *         return
 * 
 *     def applydDduSTrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_13applydDduSTrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_12applydDduSTrans[] = "\n        Apply the action of the transpose of the Jacobian containing the\n        derivatives of the displacement transfer residuals with respect to the\n        structural displacements to an input vector and store the products in\n        empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of aerodynamic displacements\n        p: ndarray\n            One-dimensional empty array of size of structural displacements\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_13applydDduSTrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydDduSTrans (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydDduSTrans", 1, 2, 2, 1); __PYX_ERR(0, 188, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydDduSTrans") < 0)) __PYX_ERR(0, 188, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydDduSTrans", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 188, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydDduSTrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 188, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_12applydDduSTrans(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_12applydDduSTrans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydDduSTrans", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 188, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 188, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":203
 *             One-dimensional empty array of size of structural displacements
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":204
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":205
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if p is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":206
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             struct_len = len(p)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":207
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":208
 *         cdef int aero_len = 0
 *         if p is not None:
 *             struct_len = len(p)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>p.data
 *         if v is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 208, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":209
 *         if p is not None:
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             aero_len = len(v)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":207
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":210
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":211
 *             struct_array = <F2FScalar*>p.data
 *         if v is not None:
 *             aero_len = len(v)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>v.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":212
 *         if v is not None:
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":210
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":214
 *             aero_array = <F2FScalar*>v.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":215
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 215, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":214
 *             aero_array = <F2FScalar*>v.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":216
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":217
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydDduSTrans(aero_array, struct_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 217, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":216
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":219
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 *         self.ptr.applydDduSTrans(aero_array, struct_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydDduSTrans(__pyx_v_aero_array, __pyx_v_struct_array);

  /* "funtofem/TransferScheme.pyx":220
 * 
 *         self.ptr.applydDduSTrans(aero_array, struct_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydLduS(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":188
 *         return
 * 
 *     def applydDduSTrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydDduSTrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":222
 *         return
 * 
 *     def applydLduS(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_15applydLduS(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_14applydLduS[] = "\n        Apply the action of the Jacobian containing the derivatives of the load\n        transfer residuals with respect to the structural displacements to an\n        input vector and store the products in empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of structural displacements\n        p: ndarray\n            One-dimensional empty array of size of structural loads\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_15applydLduS(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydLduS (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydLduS", 1, 2, 2, 1); __PYX_ERR(0, 222, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydLduS") < 0)) __PYX_ERR(0, 222, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydLduS", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 222, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLduS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 222, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_14applydLduS(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_14applydLduS(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_struct_array1;
  int __pyx_v_struct_len1;
  __pyx_t_double_complex *__pyx_v_struct_array2;
  int __pyx_v_struct_len2;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydLduS", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 222, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 222, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":236
 *             One-dimensional empty array of size of structural loads
 *         """
 *         cdef F2FScalar *struct_array1 = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len1 = 0
 *         cdef F2FScalar *struct_array2 = NULL
 */
  __pyx_v_struct_array1 = NULL;

  /* "funtofem/TransferScheme.pyx":237
 *         """
 *         cdef F2FScalar *struct_array1 = NULL
 *         cdef int struct_len1 = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *struct_array2 = NULL
 *         cdef int struct_len2 = 0
 */
  __pyx_v_struct_len1 = 0;

  /* "funtofem/TransferScheme.pyx":238
 *         cdef F2FScalar *struct_array1 = NULL
 *         cdef int struct_len1 = 0
 *         cdef F2FScalar *struct_array2 = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len2 = 0
 *         if v is not None:
 */
  __pyx_v_struct_array2 = NULL;

  /* "funtofem/TransferScheme.pyx":239
 *         cdef int struct_len1 = 0
 *         cdef F2FScalar *struct_array2 = NULL
 *         cdef int struct_len2 = 0             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             struct_len1 = len(v)
 */
  __pyx_v_struct_len2 = 0;

  /* "funtofem/TransferScheme.pyx":240
 *         cdef F2FScalar *struct_array2 = NULL
 *         cdef int struct_len2 = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":241
 *         cdef int struct_len2 = 0
 *         if v is not None:
 *             struct_len1 = len(v)             # <<<<<<<<<<<<<<
 *             struct_array1 = <F2FScalar*>v.data
 *         if p is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 241, __pyx_L1_error)
    __pyx_v_struct_len1 = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":242
 *         if v is not None:
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             struct_len2 = len(p)
 */
    __pyx_v_struct_array1 = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":240
 *         cdef F2FScalar *struct_array2 = NULL
 *         cdef int struct_len2 = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":243
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             struct_len2 = len(p)
 *             struct_array2 = <F2FScalar*>p.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":244
 *             struct_array1 = <F2FScalar*>v.data
 *         if p is not None:
 *             struct_len2 = len(p)             # <<<<<<<<<<<<<<
 *             struct_array2 = <F2FScalar*>p.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 244, __pyx_L1_error)
    __pyx_v_struct_len2 = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":245
 *         if p is not None:
 *             struct_len2 = len(p)
 *             struct_array2 = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_struct_array2 = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":243
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             struct_len2 = len(p)
 *             struct_array2 = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":247
 *             struct_array2 = <F2FScalar*>p.data
 * 
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len1 != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":248
 * 
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Input structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Output structural array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 248, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":247
 *             struct_array2 = <F2FScalar*>p.data
 * 
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":249
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Output structural array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_struct_len2 != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":250
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Output structural array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydLduS(struct_array1, struct_array2)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 250, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":249
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Output structural array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":252
 *             raise ValueError("Output structural array incorrect length")
 * 
 *         self.ptr.applydLduS(struct_array1, struct_array2)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydLduS(__pyx_v_struct_array1, __pyx_v_struct_array2);

  /* "funtofem/TransferScheme.pyx":253
 * 
 *         self.ptr.applydLduS(struct_array1, struct_array2)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydLduSTrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":222
 *         return
 * 
 *     def applydLduS(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLduS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":255
 *         return
 * 
 *     def applydLduSTrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_17applydLduSTrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_16applydLduSTrans[] = "\n        Apply the action of the transpose of the Jacobian containing the\n        derivatives of the load transfer residuals with respect to the\n        structural displacements to an input vector and store the products in\n        empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of structural loads\n        p: ndarray\n            One-dimensional empty array of size of structural displacements\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_17applydLduSTrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydLduSTrans (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydLduSTrans", 1, 2, 2, 1); __PYX_ERR(0, 255, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydLduSTrans") < 0)) __PYX_ERR(0, 255, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydLduSTrans", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 255, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLduSTrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 255, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 256, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_16applydLduSTrans(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_16applydLduSTrans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_struct_array1;
  int __pyx_v_struct_len1;
  __pyx_t_double_complex *__pyx_v_struct_array2;
  int __pyx_v_struct_len2;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydLduSTrans", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 255, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 255, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":271
 *         """
 * 
 *         cdef F2FScalar *struct_array1 = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len1 = 0
 *         cdef F2FScalar *struct_array2 = NULL
 */
  __pyx_v_struct_array1 = NULL;

  /* "funtofem/TransferScheme.pyx":272
 * 
 *         cdef F2FScalar *struct_array1 = NULL
 *         cdef int struct_len1 = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *struct_array2 = NULL
 *         cdef int struct_len2 = 0
 */
  __pyx_v_struct_len1 = 0;

  /* "funtofem/TransferScheme.pyx":273
 *         cdef F2FScalar *struct_array1 = NULL
 *         cdef int struct_len1 = 0
 *         cdef F2FScalar *struct_array2 = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len2 = 0
 *         if v is not None:
 */
  __pyx_v_struct_array2 = NULL;

  /* "funtofem/TransferScheme.pyx":274
 *         cdef int struct_len1 = 0
 *         cdef F2FScalar *struct_array2 = NULL
 *         cdef int struct_len2 = 0             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             struct_len1 = len(v)
 */
  __pyx_v_struct_len2 = 0;

  /* "funtofem/TransferScheme.pyx":275
 *         cdef F2FScalar *struct_array2 = NULL
 *         cdef int struct_len2 = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":276
 *         cdef int struct_len2 = 0
 *         if v is not None:
 *             struct_len1 = len(v)             # <<<<<<<<<<<<<<
 *             struct_array1 = <F2FScalar*>v.data
 *         if p is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 276, __pyx_L1_error)
    __pyx_v_struct_len1 = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":277
 *         if v is not None:
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             struct_len2 = len(p)
 */
    __pyx_v_struct_array1 = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":275
 *         cdef F2FScalar *struct_array2 = NULL
 *         cdef int struct_len2 = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":278
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             struct_len2 = len(p)
 *             struct_array2 = <F2FScalar*>p.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":279
 *             struct_array1 = <F2FScalar*>v.data
 *         if p is not None:
 *             struct_len2 = len(p)             # <<<<<<<<<<<<<<
 *             struct_array2 = <F2FScalar*>p.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 279, __pyx_L1_error)
    __pyx_v_struct_len2 = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":280
 *         if p is not None:
 *             struct_len2 = len(p)
 *             struct_array2 = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_struct_array2 = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":278
 *             struct_len1 = len(v)
 *             struct_array1 = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             struct_len2 = len(p)
 *             struct_array2 = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":282
 *             struct_array2 = <F2FScalar*>p.data
 * 
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len1 != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":283
 * 
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Input structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Output structural array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 283, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":282
 *             struct_array2 = <F2FScalar*>p.data
 * 
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":284
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Output structural array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_struct_len2 != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":285
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Output structural array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydLduSTrans(struct_array1, struct_array2)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 285, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":284
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Output structural array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":287
 *             raise ValueError("Output structural array incorrect length")
 * 
 *         self.ptr.applydLduSTrans(struct_array1, struct_array2)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydLduSTrans(__pyx_v_struct_array1, __pyx_v_struct_array2);

  /* "funtofem/TransferScheme.pyx":288
 * 
 *         self.ptr.applydLduSTrans(struct_array1, struct_array2)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydLdfA(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":255
 *         return
 * 
 *     def applydLduSTrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLduSTrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":290
 *         return
 * 
 *     def applydLdfA(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_19applydLdfA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_18applydLdfA[] = "\n        Apply the action of the Jacobian containing the derivatives of the load\n        transfer residuals with respect to the aerodynamic forces to an\n        input vector and store the products in empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of aerodynamic forces\n        p: ndarray\n            One-dimensional empty array of size of structural loads\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_19applydLdfA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydLdfA (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydLdfA", 1, 2, 2, 1); __PYX_ERR(0, 290, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydLdfA") < 0)) __PYX_ERR(0, 290, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydLdfA", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 290, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLdfA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 290, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 291, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_18applydLdfA(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_18applydLdfA(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydLdfA", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 290, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 290, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":304
 *             One-dimensional empty array of size of structural loads
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":305
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":306
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if p is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":307
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             struct_len = len(p)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":308
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":309
 *         cdef int aero_len = 0
 *         if p is not None:
 *             struct_len = len(p)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>p.data
 *         if v is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 309, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":310
 *         if p is not None:
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             aero_len = len(v)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":308
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":311
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":312
 *             struct_array = <F2FScalar*>p.data
 *         if v is not None:
 *             aero_len = len(v)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>v.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 312, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":313
 *         if v is not None:
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":311
 *             struct_len = len(p)
 *             struct_array = <F2FScalar*>p.data
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":315
 *             aero_array = <F2FScalar*>v.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":316
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 316, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":315
 *             aero_array = <F2FScalar*>v.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":317
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":318
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydLdfA(aero_array, struct_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 318, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":317
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":320
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 *         self.ptr.applydLdfA(aero_array, struct_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydLdfA(__pyx_v_aero_array, __pyx_v_struct_array);

  /* "funtofem/TransferScheme.pyx":321
 * 
 *         self.ptr.applydLdfA(aero_array, struct_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydLdfATrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":290
 *         return
 * 
 *     def applydLdfA(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLdfA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":323
 *         return
 * 
 *     def applydLdfATrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_21applydLdfATrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_20applydLdfATrans[] = "\n        Apply the action of the transpose of the Jacobian containing the\n        derivatives of the load transfer residuals with respect to the\n        aerodynamic forces to an input vector and store the products in\n        empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of structural loads\n        p: ndarray\n            One-dimensional empty array of size of aerodynamic forces\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_21applydLdfATrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydLdfATrans (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydLdfATrans", 1, 2, 2, 1); __PYX_ERR(0, 323, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydLdfATrans") < 0)) __PYX_ERR(0, 323, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydLdfATrans", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 323, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLdfATrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 323, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_20applydLdfATrans(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_20applydLdfATrans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydLdfATrans", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 323, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 323, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":338
 *             One-dimensional empty array of size of aerodynamic forces
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":339
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":340
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if v is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":341
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             struct_len = len(v)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":342
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":343
 *         cdef int aero_len = 0
 *         if v is not None:
 *             struct_len = len(v)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 343, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":344
 *         if v is not None:
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             aero_len = len(p)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":342
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":345
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(p)
 *             aero_array = <F2FScalar*>p.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":346
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:
 *             aero_len = len(p)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>p.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 346, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":347
 *         if p is not None:
 *             aero_len = len(p)
 *             aero_array = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":345
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(p)
 *             aero_array = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":349
 *             aero_array = <F2FScalar*>p.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":350
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 350, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":349
 *             aero_array = <F2FScalar*>p.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":351
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":352
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydLdfATrans(struct_array, aero_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 352, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":351
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":354
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 *         self.ptr.applydLdfATrans(struct_array, aero_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydLdfATrans(__pyx_v_struct_array, __pyx_v_aero_array);

  /* "funtofem/TransferScheme.pyx":355
 * 
 *         self.ptr.applydLdfATrans(struct_array, aero_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydDdxA0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":323
 *         return
 * 
 *     def applydLdfATrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLdfATrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":357
 *         return
 * 
 *     def applydDdxA0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                     np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_23applydDdxA0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_22applydDdxA0[] = "\n        Apply the action of the Jacobian containing the derivatives of the\n        displacement transfer residuals with respect to the initial aerodynamic\n        surface node locations to an input vector and store the products in\n        empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of aerodynamic surface node locations\n        p: ndarray\n            One-dimensional empty array of size of aerodynamic nodes\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_23applydDdxA0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydDdxA0 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydDdxA0", 1, 2, 2, 1); __PYX_ERR(0, 357, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydDdxA0") < 0)) __PYX_ERR(0, 357, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydDdxA0", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydDdxA0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 357, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 358, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_22applydDdxA0(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_22applydDdxA0(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __pyx_t_double_complex *__pyx_v_xA0_array;
  int __pyx_v_xA0_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydDdxA0", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 357, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 357, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":372
 *             One-dimensional empty array of size of aerodynamic nodes
 *         """
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         cdef F2FScalar *xA0_array = NULL
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":373
 *         """
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":374
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         cdef F2FScalar *xA0_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int xA0_len = 0
 *         if v is not None:
 */
  __pyx_v_xA0_array = NULL;

  /* "funtofem/TransferScheme.pyx":375
 *         cdef int aero_len = 0
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             aero_len = len(v)
 */
  __pyx_v_xA0_len = 0;

  /* "funtofem/TransferScheme.pyx":376
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":377
 *         cdef int xA0_len = 0
 *         if v is not None:
 *             aero_len = len(v)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>v.data
 *         if p is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 377, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":378
 *         if v is not None:
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             xA0_len = len(p)
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":376
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":379
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             xA0_len = len(p)
 *             xA0_array = <F2FScalar*>p.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":380
 *             aero_array = <F2FScalar*>v.data
 *         if p is not None:
 *             xA0_len = len(p)             # <<<<<<<<<<<<<<
 *             xA0_array = <F2FScalar*>p.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 380, __pyx_L1_error)
    __pyx_v_xA0_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":381
 *         if p is not None:
 *             xA0_len = len(p)
 *             xA0_array = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
    __pyx_v_xA0_array = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":379
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             xA0_len = len(p)
 *             xA0_array = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":383
 *             xA0_array = <F2FScalar*>p.data
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":384
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():
 *             raise ValueError("Aerodynamic node array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 384, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":383
 *             xA0_array = <F2FScalar*>p.data
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():
 */
  }

  /* "funtofem/TransferScheme.pyx":385
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic node array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_xA0_len != (3 * __pyx_v_self->ptr->getNumLocalAeroNodes())) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":386
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():
 *             raise ValueError("Aerodynamic node array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydDdxA0(aero_array, xA0_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 386, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":385
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic node array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":388
 *             raise ValueError("Aerodynamic node array incorrect length")
 * 
 *         self.ptr.applydDdxA0(aero_array, xA0_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydDdxA0(__pyx_v_aero_array, __pyx_v_xA0_array);

  /* "funtofem/TransferScheme.pyx":389
 * 
 *         self.ptr.applydDdxA0(aero_array, xA0_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydDdxS0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":357
 *         return
 * 
 *     def applydDdxA0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                     np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydDdxA0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":391
 *         return
 * 
 *     def applydDdxS0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                     np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_25applydDdxS0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_24applydDdxS0[] = "\n        Apply the action of the Jacobian containing the derivatives of the\n        displacement transfer residuals with respect to the initial structural\n        node locations to an input vector and store the products in empty input\n        array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of aerodynamic surface node locations\n        p: ndarray\n            One-dimensional empty array of size of structural nodes\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_25applydDdxS0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydDdxS0 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydDdxS0", 1, 2, 2, 1); __PYX_ERR(0, 391, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydDdxS0") < 0)) __PYX_ERR(0, 391, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydDdxS0", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 391, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydDdxS0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 391, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_24applydDdxS0(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_24applydDdxS0(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  CYTHON_UNUSED __pyx_t_double_complex *__pyx_v_xA0_array;
  CYTHON_UNUSED int __pyx_v_xA0_len;
  Py_ssize_t __pyx_v_xS0_len;
  __pyx_t_double_complex *__pyx_v_xS0_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydDdxS0", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 391, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 391, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":406
 *             One-dimensional empty array of size of structural nodes
 *         """
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         cdef F2FScalar *xA0_array = NULL
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":407
 *         """
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":408
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         cdef F2FScalar *xA0_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int xA0_len = 0
 *         if v is not None:
 */
  __pyx_v_xA0_array = NULL;

  /* "funtofem/TransferScheme.pyx":409
 *         cdef int aero_len = 0
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             aero_len = len(v)
 */
  __pyx_v_xA0_len = 0;

  /* "funtofem/TransferScheme.pyx":410
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":411
 *         cdef int xA0_len = 0
 *         if v is not None:
 *             aero_len = len(v)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>v.data
 *         if p is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 411, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":412
 *         if v is not None:
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             xS0_len = len(p)
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":410
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":413
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             xS0_len = len(p)
 *             xS0_array = <F2FScalar*>p.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":414
 *             aero_array = <F2FScalar*>v.data
 *         if p is not None:
 *             xS0_len = len(p)             # <<<<<<<<<<<<<<
 *             xS0_array = <F2FScalar*>p.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 414, __pyx_L1_error)
    __pyx_v_xS0_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":415
 *         if p is not None:
 *             xS0_len = len(p)
 *             xS0_array = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
    __pyx_v_xS0_array = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":413
 *             aero_len = len(v)
 *             aero_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             xS0_len = len(p)
 *             xS0_array = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":417
 *             xS0_array = <F2FScalar*>p.data
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":418
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():
 *             raise ValueError("Structural node array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 418, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":417
 *             xS0_array = <F2FScalar*>p.data
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():
 */
  }

  /* "funtofem/TransferScheme.pyx":419
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural node array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_xS0_len != (3 * __pyx_v_self->ptr->getNumLocalStructNodes())) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":420
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():
 *             raise ValueError("Structural node array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydDdxS0(aero_array, xS0_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 420, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":419
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural node array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":422
 *             raise ValueError("Structural node array incorrect length")
 * 
 *         self.ptr.applydDdxS0(aero_array, xS0_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydDdxS0(__pyx_v_aero_array, __pyx_v_xS0_array);

  /* "funtofem/TransferScheme.pyx":423
 * 
 *         self.ptr.applydDdxS0(aero_array, xS0_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydLdxA0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":391
 *         return
 * 
 *     def applydDdxS0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                     np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydDdxS0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":425
 *         return
 * 
 *     def applydLdxA0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                     np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_27applydLdxA0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_26applydLdxA0[] = "\n        Apply the action of the Jacobian containing the derivatives of the\n        displacement transfer residuals with respect to the initial structural\n        node locations to an input vector and store the products in empty input\n        array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of structural node locations\n        p: ndarray\n            One-dimensional empty array of size of structural loads\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_27applydLdxA0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydLdxA0 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydLdxA0", 1, 2, 2, 1); __PYX_ERR(0, 425, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydLdxA0") < 0)) __PYX_ERR(0, 425, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydLdxA0", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 425, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLdxA0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 425, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 426, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_26applydLdxA0(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_26applydLdxA0(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_xA0_array;
  int __pyx_v_xA0_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydLdxA0", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 425, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 425, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":440
 *             One-dimensional empty array of size of structural loads
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *xA0_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":441
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":442
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *xA0_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int xA0_len = 0
 *         if v is not None:
 */
  __pyx_v_xA0_array = NULL;

  /* "funtofem/TransferScheme.pyx":443
 *         cdef int struct_len = 0
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             struct_len = len(v)
 */
  __pyx_v_xA0_len = 0;

  /* "funtofem/TransferScheme.pyx":444
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":445
 *         cdef int xA0_len = 0
 *         if v is not None:
 *             struct_len = len(v)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 445, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":446
 *         if v is not None:
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             xA0_len = len(p)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":444
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":447
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             xA0_len = len(p)
 *             xA0_array = <F2FScalar*>p.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":448
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:
 *             xA0_len = len(p)             # <<<<<<<<<<<<<<
 *             xA0_array = <F2FScalar*>p.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 448, __pyx_L1_error)
    __pyx_v_xA0_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":449
 *         if p is not None:
 *             xA0_len = len(p)
 *             xA0_array = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_xA0_array = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":447
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             xA0_len = len(p)
 *             xA0_array = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":451
 *             xA0_array = <F2FScalar*>p.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":452
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():
 *             raise ValueError("Aerodynamic node array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 452, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":451
 *             xA0_array = <F2FScalar*>p.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():
 */
  }

  /* "funtofem/TransferScheme.pyx":453
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic node array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_xA0_len != (3 * __pyx_v_self->ptr->getNumLocalAeroNodes())) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":454
 *             raise ValueError("Structural array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():
 *             raise ValueError("Aerodynamic node array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydLdxA0(struct_array, xA0_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 454, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":453
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic node array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":456
 *             raise ValueError("Aerodynamic node array incorrect length")
 * 
 *         self.ptr.applydLdxA0(struct_array, xA0_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydLdxA0(__pyx_v_struct_array, __pyx_v_xA0_array);

  /* "funtofem/TransferScheme.pyx":457
 * 
 *         self.ptr.applydLdxA0(struct_array, xA0_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydLdxS0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":425
 *         return
 * 
 *     def applydLdxA0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                     np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLdxA0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":459
 *         return
 * 
 *     def applydLdxS0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                     np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_29applydLdxS0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_28applydLdxS0[] = "\n        Apply the action of the Jacobian containing the derivatives of the load\n        transfer residuals with respect to the initial structural node locations\n        to an input vector and store the products in empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of structural node locations\n        p: ndarray\n            One-dimensional empty array of size of structural loads\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_29applydLdxS0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydLdxS0 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydLdxS0", 1, 2, 2, 1); __PYX_ERR(0, 459, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydLdxS0") < 0)) __PYX_ERR(0, 459, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydLdxS0", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 459, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLdxS0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 459, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_28applydLdxS0(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_28applydLdxS0(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  CYTHON_UNUSED __pyx_t_double_complex *__pyx_v_xA0_array;
  CYTHON_UNUSED int __pyx_v_xA0_len;
  Py_ssize_t __pyx_v_xS0_len;
  __pyx_t_double_complex *__pyx_v_xS0_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydLdxS0", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 459, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 459, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":473
 *             One-dimensional empty array of size of structural loads
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *xA0_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":474
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":475
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *xA0_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int xA0_len = 0
 *         if v is not None:
 */
  __pyx_v_xA0_array = NULL;

  /* "funtofem/TransferScheme.pyx":476
 *         cdef int struct_len = 0
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0             # <<<<<<<<<<<<<<
 *         if v is not None:
 *             struct_len = len(v)
 */
  __pyx_v_xA0_len = 0;

  /* "funtofem/TransferScheme.pyx":477
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_v) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":478
 *         cdef int xA0_len = 0
 *         if v is not None:
 *             struct_len = len(v)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 478, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":479
 *         if v is not None:
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data             # <<<<<<<<<<<<<<
 *         if p is not None:
 *             xS0_len = len(p)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_v->data);

    /* "funtofem/TransferScheme.pyx":477
 *         cdef F2FScalar *xA0_array = NULL
 *         cdef int xA0_len = 0
 *         if v is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 */
  }

  /* "funtofem/TransferScheme.pyx":480
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             xS0_len = len(p)
 *             xS0_array = <F2FScalar*>p.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_p) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":481
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:
 *             xS0_len = len(p)             # <<<<<<<<<<<<<<
 *             xS0_array = <F2FScalar*>p.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 481, __pyx_L1_error)
    __pyx_v_xS0_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":482
 *         if p is not None:
 *             xS0_len = len(p)
 *             xS0_array = <F2FScalar*>p.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_xS0_array = ((__pyx_t_double_complex *)__pyx_v_p->data);

    /* "funtofem/TransferScheme.pyx":480
 *             struct_len = len(v)
 *             struct_array = <F2FScalar*>v.data
 *         if p is not None:             # <<<<<<<<<<<<<<
 *             xS0_len = len(p)
 *             xS0_array = <F2FScalar*>p.data
 */
  }

  /* "funtofem/TransferScheme.pyx":484
 *             xS0_array = <F2FScalar*>p.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":485
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():
 *             raise ValueError("Structural node array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 485, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":484
 *             xS0_array = <F2FScalar*>p.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():
 */
  }

  /* "funtofem/TransferScheme.pyx":486
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural node array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_xS0_len != (3 * __pyx_v_self->ptr->getNumLocalStructNodes())) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":487
 *             raise ValueError("Structural array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():
 *             raise ValueError("Structural node array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydLdxS0(struct_array, xS0_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 487, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":486
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural node array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":489
 *             raise ValueError("Structural node array incorrect length")
 * 
 *         self.ptr.applydLdxS0(struct_array, xS0_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydLdxS0(__pyx_v_struct_array, __pyx_v_xS0_array);

  /* "funtofem/TransferScheme.pyx":490
 * 
 *         self.ptr.applydLdxS0(struct_array, xS0_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def testAllDerivatives(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":459
 *         return
 * 
 *     def applydLdxS0(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                     np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydLdxS0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":492
 *         return
 * 
 *     def testAllDerivatives(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_disps,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_loads,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_31testAllDerivatives(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_30testAllDerivatives[] = "\n        Test the output of :meth:`transferLoads` by comparison with results from\n        finite difference approximation or complex step approximation\n\n        Parameters\n        ----------\n        struct_disps: ndarray\n            One-dimensional array of structural displacements\n        aero_loads: ndarray\n            One-dimensional array of aerodynamic loads\n        h: float\n            Step size (for finite difference or complex step)\n        rtol: float\n            Relative error tolerance used in the test\n        atol: float\n            Absolute error tolerance used in the test\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_31testAllDerivatives(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_struct_disps = 0;
  PyArrayObject *__pyx_v_aero_loads = 0;
  __pyx_t_double_complex __pyx_v_h;
  double __pyx_v_rtol;
  double __pyx_v_atol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testAllDerivatives (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_struct_disps,&__pyx_n_s_aero_loads,&__pyx_n_s_h,&__pyx_n_s_rtol,&__pyx_n_s_atol,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_disps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_loads)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("testAllDerivatives", 0, 3, 5, 1); __PYX_ERR(0, 492, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("testAllDerivatives", 0, 3, 5, 2); __PYX_ERR(0, 492, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rtol);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atol);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "testAllDerivatives") < 0)) __PYX_ERR(0, 492, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_struct_disps = ((PyArrayObject *)values[0]);
    __pyx_v_aero_loads = ((PyArrayObject *)values[1]);
    __pyx_v_h = __Pyx_PyComplex_As___pyx_t_double_complex(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_rtol = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_rtol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L3_error)
    } else {
      __pyx_v_rtol = ((double)1e-6);
    }
    if (values[4]) {
      __pyx_v_atol = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_atol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L3_error)
    } else {
      __pyx_v_atol = ((double)1e-30);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("testAllDerivatives", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 492, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.testAllDerivatives", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct_disps), __pyx_ptype_5numpy_ndarray, 1, "struct_disps", 0))) __PYX_ERR(0, 493, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero_loads), __pyx_ptype_5numpy_ndarray, 1, "aero_loads", 0))) __PYX_ERR(0, 494, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_30testAllDerivatives(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_struct_disps, __pyx_v_aero_loads, __pyx_v_h, __pyx_v_rtol, __pyx_v_atol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_30testAllDerivatives(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_struct_disps, PyArrayObject *__pyx_v_aero_loads, __pyx_t_double_complex __pyx_v_h, double __pyx_v_rtol, double __pyx_v_atol) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  CYTHON_UNUSED int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  CYTHON_UNUSED int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_aero_loads;
  __Pyx_Buffer __pyx_pybuffer_aero_loads;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_struct_disps;
  __Pyx_Buffer __pyx_pybuffer_struct_disps;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("testAllDerivatives", 0);
  __pyx_pybuffer_struct_disps.pybuffer.buf = NULL;
  __pyx_pybuffer_struct_disps.refcount = 0;
  __pyx_pybuffernd_struct_disps.data = NULL;
  __pyx_pybuffernd_struct_disps.rcbuffer = &__pyx_pybuffer_struct_disps;
  __pyx_pybuffer_aero_loads.pybuffer.buf = NULL;
  __pyx_pybuffer_aero_loads.refcount = 0;
  __pyx_pybuffernd_aero_loads.data = NULL;
  __pyx_pybuffernd_aero_loads.rcbuffer = &__pyx_pybuffer_aero_loads;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_struct_disps.rcbuffer->pybuffer, (PyObject*)__pyx_v_struct_disps, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 492, __pyx_L1_error)
  }
  __pyx_pybuffernd_struct_disps.diminfo[0].strides = __pyx_pybuffernd_struct_disps.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_struct_disps.diminfo[0].shape = __pyx_pybuffernd_struct_disps.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_aero_loads.rcbuffer->pybuffer, (PyObject*)__pyx_v_aero_loads, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 492, __pyx_L1_error)
  }
  __pyx_pybuffernd_aero_loads.diminfo[0].strides = __pyx_pybuffernd_aero_loads.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_aero_loads.diminfo[0].shape = __pyx_pybuffernd_aero_loads.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":513
 *             Absolute error tolerance used in the test
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":514
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":515
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if struct_disps is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":516
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if struct_disps is not None:
 *             struct_len = len(struct_disps)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":517
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_disps is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_struct_disps) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":518
 *         cdef int aero_len = 0
 *         if struct_disps is not None:
 *             struct_len = len(struct_disps)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_loads is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_struct_disps)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 518, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":519
 *         if struct_disps is not None:
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data             # <<<<<<<<<<<<<<
 *         if aero_loads is not None:
 *             aero_len = len(aero_loads)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_struct_disps->data);

    /* "funtofem/TransferScheme.pyx":517
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_disps is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 */
  }

  /* "funtofem/TransferScheme.pyx":520
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_loads is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_loads)
 *             aero_array = <F2FScalar*>aero_loads.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_aero_loads) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":521
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_loads is not None:
 *             aero_len = len(aero_loads)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>aero_loads.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_aero_loads)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 521, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":522
 *         if aero_loads is not None:
 *             aero_len = len(aero_loads)
 *             aero_array = <F2FScalar*>aero_loads.data             # <<<<<<<<<<<<<<
 * 
 *         return self.ptr.testAllDerivatives(struct_array, aero_array, h, rtol, atol)
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_aero_loads->data);

    /* "funtofem/TransferScheme.pyx":520
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_loads is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_loads)
 *             aero_array = <F2FScalar*>aero_loads.data
 */
  }

  /* "funtofem/TransferScheme.pyx":524
 *             aero_array = <F2FScalar*>aero_loads.data
 * 
 *         return self.ptr.testAllDerivatives(struct_array, aero_array, h, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 *     def transformEquivRigidMotion(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->ptr->testAllDerivatives(__pyx_v_struct_array, __pyx_v_aero_array, __pyx_t_double_complex_from_parts(__Pyx_CREAL(__pyx_v_h), __Pyx_CIMAG(__pyx_v_h)), __pyx_v_rtol, __pyx_v_atol)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":492
 *         return
 * 
 *     def testAllDerivatives(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_disps,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_loads,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_loads.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_disps.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.testAllDerivatives", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_loads.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_disps.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":526
 *         return self.ptr.testAllDerivatives(struct_array, aero_array, h, rtol, atol)
 * 
 *     def transformEquivRigidMotion(self,             # <<<<<<<<<<<<<<
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] aero_disps,
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] R,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_33transformEquivRigidMotion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_32transformEquivRigidMotion[] = "\n        Compute least-squares fit of rigid rotation and translation to set of\n        aerodynamic surface displacements.\n        Use rotation and translation to compute difference between given\n        displacements and the displacements due to rigid motion alone,\n        i.e. the elastic deformation.\n        Store the computed rotation, translation, and elastic deformation in\n        empty input arrays\n\n        Parameters\n        ----------\n        aero_disps: ndarray\n            One-dimensional array of aerodynamic displacements\n        R: (3,3) ndarray\n            Empty (3,3) array for output rotation matrix\n        t: (,3) ndarray\n            Empty (3,1) array for output translatio\n        u: ndarray\n            One-dimensional array of elastic deformations of size of\n            aerodynamic displacements\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_33transformEquivRigidMotion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_aero_disps = 0;
  PyArrayObject *__pyx_v_R = 0;
  PyArrayObject *__pyx_v_t = 0;
  PyArrayObject *__pyx_v_u = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transformEquivRigidMotion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aero_disps,&__pyx_n_s_R,&__pyx_n_s_t,&__pyx_n_s_u,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_disps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transformEquivRigidMotion", 1, 4, 4, 1); __PYX_ERR(0, 526, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transformEquivRigidMotion", 1, 4, 4, 2); __PYX_ERR(0, 526, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transformEquivRigidMotion", 1, 4, 4, 3); __PYX_ERR(0, 526, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transformEquivRigidMotion") < 0)) __PYX_ERR(0, 526, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_aero_disps = ((PyArrayObject *)values[0]);
    __pyx_v_R = ((PyArrayObject *)values[1]);
    __pyx_v_t = ((PyArrayObject *)values[2]);
    __pyx_v_u = ((PyArrayObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transformEquivRigidMotion", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 526, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.transformEquivRigidMotion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero_disps), __pyx_ptype_5numpy_ndarray, 1, "aero_disps", 0))) __PYX_ERR(0, 527, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_R), __pyx_ptype_5numpy_ndarray, 1, "R", 0))) __PYX_ERR(0, 528, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), __pyx_ptype_5numpy_ndarray, 1, "t", 0))) __PYX_ERR(0, 529, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_u), __pyx_ptype_5numpy_ndarray, 1, "u", 0))) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_32transformEquivRigidMotion(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_aero_disps, __pyx_v_R, __pyx_v_t, __pyx_v_u);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_32transformEquivRigidMotion(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_aero_disps, PyArrayObject *__pyx_v_R, PyArrayObject *__pyx_v_t, PyArrayObject *__pyx_v_u) {
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_R;
  __Pyx_Buffer __pyx_pybuffer_R;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_aero_disps;
  __Pyx_Buffer __pyx_pybuffer_aero_disps;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_t;
  __Pyx_Buffer __pyx_pybuffer_t;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_u;
  __Pyx_Buffer __pyx_pybuffer_u;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transformEquivRigidMotion", 0);
  __pyx_pybuffer_aero_disps.pybuffer.buf = NULL;
  __pyx_pybuffer_aero_disps.refcount = 0;
  __pyx_pybuffernd_aero_disps.data = NULL;
  __pyx_pybuffernd_aero_disps.rcbuffer = &__pyx_pybuffer_aero_disps;
  __pyx_pybuffer_R.pybuffer.buf = NULL;
  __pyx_pybuffer_R.refcount = 0;
  __pyx_pybuffernd_R.data = NULL;
  __pyx_pybuffernd_R.rcbuffer = &__pyx_pybuffer_R;
  __pyx_pybuffer_t.pybuffer.buf = NULL;
  __pyx_pybuffer_t.refcount = 0;
  __pyx_pybuffernd_t.data = NULL;
  __pyx_pybuffernd_t.rcbuffer = &__pyx_pybuffer_t;
  __pyx_pybuffer_u.pybuffer.buf = NULL;
  __pyx_pybuffer_u.refcount = 0;
  __pyx_pybuffernd_u.data = NULL;
  __pyx_pybuffernd_u.rcbuffer = &__pyx_pybuffer_u;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_aero_disps.rcbuffer->pybuffer, (PyObject*)__pyx_v_aero_disps, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 526, __pyx_L1_error)
  }
  __pyx_pybuffernd_aero_disps.diminfo[0].strides = __pyx_pybuffernd_aero_disps.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_aero_disps.diminfo[0].shape = __pyx_pybuffernd_aero_disps.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_R.rcbuffer->pybuffer, (PyObject*)__pyx_v_R, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 526, __pyx_L1_error)
  }
  __pyx_pybuffernd_R.diminfo[0].strides = __pyx_pybuffernd_R.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_R.diminfo[0].shape = __pyx_pybuffernd_R.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_t.rcbuffer->pybuffer, (PyObject*)__pyx_v_t, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 526, __pyx_L1_error)
  }
  __pyx_pybuffernd_t.diminfo[0].strides = __pyx_pybuffernd_t.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_t.diminfo[0].shape = __pyx_pybuffernd_t.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_u.rcbuffer->pybuffer, (PyObject*)__pyx_v_u, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 526, __pyx_L1_error)
  }
  __pyx_pybuffernd_u.diminfo[0].strides = __pyx_pybuffernd_u.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_u.diminfo[0].shape = __pyx_pybuffernd_u.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":552
 *             aerodynamic displacements
 *         """
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if aero_disps is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":553
 *         """
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if aero_disps is not None:
 *             aero_len = len(aero_disps)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":554
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if aero_disps is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_disps)
 *             aero_array = <F2FScalar*>aero_disps.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_aero_disps) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":555
 *         cdef int aero_len = 0
 *         if aero_disps is not None:
 *             aero_len = len(aero_disps)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>aero_disps.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_aero_disps)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 555, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":556
 *         if aero_disps is not None:
 *             aero_len = len(aero_disps)
 *             aero_array = <F2FScalar*>aero_disps.data             # <<<<<<<<<<<<<<
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_aero_disps->data);

    /* "funtofem/TransferScheme.pyx":554
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if aero_disps is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_disps)
 *             aero_array = <F2FScalar*>aero_disps.data
 */
  }

  /* "funtofem/TransferScheme.pyx":558
 *             aero_array = <F2FScalar*>aero_disps.data
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  __pyx_t_2 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "funtofem/TransferScheme.pyx":559
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.transformEquivRigidMotion(aero_array,
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 559, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":558
 *             aero_array = <F2FScalar*>aero_disps.data
 * 
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":561
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 *         self.ptr.transformEquivRigidMotion(aero_array,             # <<<<<<<<<<<<<<
 *                                            <F2FScalar*>R.data,
 *                                            <F2FScalar*>t.data,
 */
  __pyx_v_self->ptr->transformEquivRigidMotion(__pyx_v_aero_array, ((__pyx_t_double_complex *)__pyx_v_R->data), ((__pyx_t_double_complex *)__pyx_v_t->data), ((__pyx_t_double_complex *)__pyx_v_u->data));

  /* "funtofem/TransferScheme.pyx":566
 *                                            <F2FScalar*>u.data)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydRduATrans(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":526
 *         return self.ptr.testAllDerivatives(struct_array, aero_array, h, rtol, atol)
 * 
 *     def transformEquivRigidMotion(self,             # <<<<<<<<<<<<<<
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] aero_disps,
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] R,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_R.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_disps.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_t.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_u.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.transformEquivRigidMotion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_R.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_disps.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_t.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_u.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":568
 *         return
 * 
 *     def applydRduATrans(self,             # <<<<<<<<<<<<<<
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] vecs,
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] prods):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_35applydRduATrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_34applydRduATrans[] = "\n        Compute rigid transform Jacobian-vector products for solving adjoint\n        equations\n\n        Parameters\n        ----------\n        vecs: ndarray\n            array of rigid transform adjoint variables\n        prods: ndarray\n            array of Jacobian-vector products\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_35applydRduATrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_vecs = 0;
  PyArrayObject *__pyx_v_prods = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydRduATrans (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vecs,&__pyx_n_s_prods,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vecs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prods)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydRduATrans", 1, 2, 2, 1); __PYX_ERR(0, 568, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydRduATrans") < 0)) __PYX_ERR(0, 568, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_vecs = ((PyArrayObject *)values[0]);
    __pyx_v_prods = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydRduATrans", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 568, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydRduATrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vecs), __pyx_ptype_5numpy_ndarray, 1, "vecs", 0))) __PYX_ERR(0, 569, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prods), __pyx_ptype_5numpy_ndarray, 1, "prods", 0))) __PYX_ERR(0, 570, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_34applydRduATrans(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_vecs, __pyx_v_prods);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_34applydRduATrans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_vecs, PyArrayObject *__pyx_v_prods) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_prods;
  __Pyx_Buffer __pyx_pybuffer_prods;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_vecs;
  __Pyx_Buffer __pyx_pybuffer_vecs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydRduATrans", 0);
  __pyx_pybuffer_vecs.pybuffer.buf = NULL;
  __pyx_pybuffer_vecs.refcount = 0;
  __pyx_pybuffernd_vecs.data = NULL;
  __pyx_pybuffernd_vecs.rcbuffer = &__pyx_pybuffer_vecs;
  __pyx_pybuffer_prods.pybuffer.buf = NULL;
  __pyx_pybuffer_prods.refcount = 0;
  __pyx_pybuffernd_prods.data = NULL;
  __pyx_pybuffernd_prods.rcbuffer = &__pyx_pybuffer_prods;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_vecs.rcbuffer->pybuffer, (PyObject*)__pyx_v_vecs, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 568, __pyx_L1_error)
  }
  __pyx_pybuffernd_vecs.diminfo[0].strides = __pyx_pybuffernd_vecs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_vecs.diminfo[0].shape = __pyx_pybuffernd_vecs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_prods.rcbuffer->pybuffer, (PyObject*)__pyx_v_prods, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 568, __pyx_L1_error)
  }
  __pyx_pybuffernd_prods.diminfo[0].strides = __pyx_pybuffernd_prods.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_prods.diminfo[0].shape = __pyx_pybuffernd_prods.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":582
 *             array of Jacobian-vector products
 *         """
 *         self.ptr.applydRduATrans(<F2FScalar*>vecs.data,             # <<<<<<<<<<<<<<
 *                                  <F2FScalar*>prods.data)
 * 
 */
  __pyx_v_self->ptr->applydRduATrans(((__pyx_t_double_complex *)__pyx_v_vecs->data), ((__pyx_t_double_complex *)__pyx_v_prods->data));

  /* "funtofem/TransferScheme.pyx":585
 *                                  <F2FScalar*>prods.data)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydRdxA0Trans(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":568
 *         return
 * 
 *     def applydRduATrans(self,             # <<<<<<<<<<<<<<
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] vecs,
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] prods):
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_prods.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vecs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydRduATrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_prods.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vecs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":587
 *         return
 * 
 *     def applydRdxA0Trans(self,             # <<<<<<<<<<<<<<
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] aero_disps,
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] vecs,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_37applydRdxA0Trans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_36applydRdxA0Trans[] = "\n        Compute rigid transform Jacobian-vector products for gradient assembly\n\n        Parameters\n        ----------\n        aero_disps: ndarray\n            One-dimensional array of aerodynamic displacements\n        vecs: ndarray\n            array of rigid transform adjoint variables\n        prods: ndarray\n            array of Jacobian-vector products\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_37applydRdxA0Trans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_aero_disps = 0;
  PyArrayObject *__pyx_v_vecs = 0;
  PyArrayObject *__pyx_v_prods = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydRdxA0Trans (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aero_disps,&__pyx_n_s_vecs,&__pyx_n_s_prods,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_disps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vecs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydRdxA0Trans", 1, 3, 3, 1); __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prods)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydRdxA0Trans", 1, 3, 3, 2); __PYX_ERR(0, 587, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydRdxA0Trans") < 0)) __PYX_ERR(0, 587, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_aero_disps = ((PyArrayObject *)values[0]);
    __pyx_v_vecs = ((PyArrayObject *)values[1]);
    __pyx_v_prods = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydRdxA0Trans", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 587, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydRdxA0Trans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero_disps), __pyx_ptype_5numpy_ndarray, 1, "aero_disps", 0))) __PYX_ERR(0, 588, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vecs), __pyx_ptype_5numpy_ndarray, 1, "vecs", 0))) __PYX_ERR(0, 589, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prods), __pyx_ptype_5numpy_ndarray, 1, "prods", 0))) __PYX_ERR(0, 590, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_36applydRdxA0Trans(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), __pyx_v_aero_disps, __pyx_v_vecs, __pyx_v_prods);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_36applydRdxA0Trans(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, PyArrayObject *__pyx_v_aero_disps, PyArrayObject *__pyx_v_vecs, PyArrayObject *__pyx_v_prods) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_aero_disps;
  __Pyx_Buffer __pyx_pybuffer_aero_disps;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_prods;
  __Pyx_Buffer __pyx_pybuffer_prods;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_vecs;
  __Pyx_Buffer __pyx_pybuffer_vecs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydRdxA0Trans", 0);
  __pyx_pybuffer_aero_disps.pybuffer.buf = NULL;
  __pyx_pybuffer_aero_disps.refcount = 0;
  __pyx_pybuffernd_aero_disps.data = NULL;
  __pyx_pybuffernd_aero_disps.rcbuffer = &__pyx_pybuffer_aero_disps;
  __pyx_pybuffer_vecs.pybuffer.buf = NULL;
  __pyx_pybuffer_vecs.refcount = 0;
  __pyx_pybuffernd_vecs.data = NULL;
  __pyx_pybuffernd_vecs.rcbuffer = &__pyx_pybuffer_vecs;
  __pyx_pybuffer_prods.pybuffer.buf = NULL;
  __pyx_pybuffer_prods.refcount = 0;
  __pyx_pybuffernd_prods.data = NULL;
  __pyx_pybuffernd_prods.rcbuffer = &__pyx_pybuffer_prods;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_aero_disps.rcbuffer->pybuffer, (PyObject*)__pyx_v_aero_disps, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 587, __pyx_L1_error)
  }
  __pyx_pybuffernd_aero_disps.diminfo[0].strides = __pyx_pybuffernd_aero_disps.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_aero_disps.diminfo[0].shape = __pyx_pybuffernd_aero_disps.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_vecs.rcbuffer->pybuffer, (PyObject*)__pyx_v_vecs, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 587, __pyx_L1_error)
  }
  __pyx_pybuffernd_vecs.diminfo[0].strides = __pyx_pybuffernd_vecs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_vecs.diminfo[0].shape = __pyx_pybuffernd_vecs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_prods.rcbuffer->pybuffer, (PyObject*)__pyx_v_prods, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 587, __pyx_L1_error)
  }
  __pyx_pybuffernd_prods.diminfo[0].strides = __pyx_pybuffernd_prods.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_prods.diminfo[0].shape = __pyx_pybuffernd_prods.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":603
 *             array of Jacobian-vector products
 *         """
 *         self.ptr.applydRdxA0Trans(<F2FScalar*>aero_disps.data,             # <<<<<<<<<<<<<<
 *                              <F2FScalar*>vecs.data,
 *                              <F2FScalar*>prods.data)
 */
  __pyx_v_self->ptr->applydRdxA0Trans(((__pyx_t_double_complex *)__pyx_v_aero_disps->data), ((__pyx_t_double_complex *)__pyx_v_vecs->data), ((__pyx_t_double_complex *)__pyx_v_prods->data));

  /* "funtofem/TransferScheme.pyx":607
 *                              <F2FScalar*>prods.data)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 * # Generic thermal transfer scheme
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":587
 *         return
 * 
 *     def applydRdxA0Trans(self,             # <<<<<<<<<<<<<<
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] aero_disps,
 *         np.ndarray[F2FScalar, ndim=1, mode='c'] vecs,
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_disps.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_prods.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vecs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.applydRdxA0Trans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_disps.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_prods.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vecs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_39__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_39__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_38__reduce_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_41__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_41__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_40__setstate_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyTransferScheme_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyTransferScheme.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":621
 *     cdef ThermalTransfer *ptr
 * 
 *     def setAeroNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):             # <<<<<<<<<<<<<<
 *         """
 *         Set and store the aerodynamic surface node locations in memory
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_1setAeroNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_setAeroNodes[] = "\n        Set and store the aerodynamic surface node locations in memory\n\n        Parameters\n        ----------\n        X: ndarray\n            One-dimensional array of aerodynamic surface node locations\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_1setAeroNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAeroNodes (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X), __pyx_ptype_5numpy_ndarray, 1, "X", 0))) __PYX_ERR(0, 621, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_setAeroNodes(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), ((PyArrayObject *)__pyx_v_X));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_setAeroNodes(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_X) {
  int __pyx_v_nnodes;
  __pyx_t_double_complex *__pyx_v_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_X;
  __Pyx_Buffer __pyx_pybuffer_X;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAeroNodes", 0);
  __pyx_pybuffer_X.pybuffer.buf = NULL;
  __pyx_pybuffer_X.refcount = 0;
  __pyx_pybuffernd_X.data = NULL;
  __pyx_pybuffernd_X.rcbuffer = &__pyx_pybuffer_X;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X.rcbuffer->pybuffer, (PyObject*)__pyx_v_X, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 621, __pyx_L1_error)
  }
  __pyx_pybuffernd_X.diminfo[0].strides = __pyx_pybuffernd_X.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X.diminfo[0].shape = __pyx_pybuffernd_X.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":630
 *             One-dimensional array of aerodynamic surface node locations
 *         """
 *         cdef int nnodes = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *array = NULL
 *         if X is not None:
 */
  __pyx_v_nnodes = 0;

  /* "funtofem/TransferScheme.pyx":631
 *         """
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL             # <<<<<<<<<<<<<<
 *         if X is not None:
 *             nnodes = int(len(X)//3)
 */
  __pyx_v_array = NULL;

  /* "funtofem/TransferScheme.pyx":632
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL
 *         if X is not None:             # <<<<<<<<<<<<<<
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_X) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":633
 *         cdef F2FScalar *array = NULL
 *         if X is not None:
 *             nnodes = int(len(X)//3)             # <<<<<<<<<<<<<<
 *             array = <F2FScalar*>X.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_X)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 633, __pyx_L1_error)
    __pyx_v_nnodes = ((int)__Pyx_div_Py_ssize_t(__pyx_t_3, 3));

    /* "funtofem/TransferScheme.pyx":634
 *         if X is not None:
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.setAeroNodes(array, nnodes)
 */
    __pyx_v_array = ((__pyx_t_double_complex *)__pyx_v_X->data);

    /* "funtofem/TransferScheme.pyx":632
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL
 *         if X is not None:             # <<<<<<<<<<<<<<
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data
 */
  }

  /* "funtofem/TransferScheme.pyx":636
 *             array = <F2FScalar*>X.data
 * 
 *         self.ptr.setAeroNodes(array, nnodes)             # <<<<<<<<<<<<<<
 * 
 *         return
 */
  __pyx_v_self->ptr->setAeroNodes(__pyx_v_array, __pyx_v_nnodes);

  /* "funtofem/TransferScheme.pyx":638
 *         self.ptr.setAeroNodes(array, nnodes)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def setStructNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":621
 *     cdef ThermalTransfer *ptr
 * 
 *     def setAeroNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):             # <<<<<<<<<<<<<<
 *         """
 *         Set and store the aerodynamic surface node locations in memory
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.setAeroNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":640
 *         return
 * 
 *     def setStructNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):             # <<<<<<<<<<<<<<
 *         """
 *         Set and store the structural node locations in memory
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_3setStructNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_2setStructNodes[] = "\n        Set and store the structural node locations in memory\n\n        Parameters\n        ----------\n        X: ndarray\n            One-dimensional array of structural node locations\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_3setStructNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setStructNodes (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X), __pyx_ptype_5numpy_ndarray, 1, "X", 0))) __PYX_ERR(0, 640, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_2setStructNodes(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), ((PyArrayObject *)__pyx_v_X));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_2setStructNodes(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_X) {
  int __pyx_v_nnodes;
  __pyx_t_double_complex *__pyx_v_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_X;
  __Pyx_Buffer __pyx_pybuffer_X;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setStructNodes", 0);
  __pyx_pybuffer_X.pybuffer.buf = NULL;
  __pyx_pybuffer_X.refcount = 0;
  __pyx_pybuffernd_X.data = NULL;
  __pyx_pybuffernd_X.rcbuffer = &__pyx_pybuffer_X;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X.rcbuffer->pybuffer, (PyObject*)__pyx_v_X, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 640, __pyx_L1_error)
  }
  __pyx_pybuffernd_X.diminfo[0].strides = __pyx_pybuffernd_X.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X.diminfo[0].shape = __pyx_pybuffernd_X.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":649
 *             One-dimensional array of structural node locations
 *         """
 *         cdef int nnodes = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *array = NULL
 *         if X is not None:
 */
  __pyx_v_nnodes = 0;

  /* "funtofem/TransferScheme.pyx":650
 *         """
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL             # <<<<<<<<<<<<<<
 *         if X is not None:
 *             nnodes = int(len(X)//3)
 */
  __pyx_v_array = NULL;

  /* "funtofem/TransferScheme.pyx":651
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL
 *         if X is not None:             # <<<<<<<<<<<<<<
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_X) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":652
 *         cdef F2FScalar *array = NULL
 *         if X is not None:
 *             nnodes = int(len(X)//3)             # <<<<<<<<<<<<<<
 *             array = <F2FScalar*>X.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_X)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 652, __pyx_L1_error)
    __pyx_v_nnodes = ((int)__Pyx_div_Py_ssize_t(__pyx_t_3, 3));

    /* "funtofem/TransferScheme.pyx":653
 *         if X is not None:
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.setStructNodes(array, nnodes)
 */
    __pyx_v_array = ((__pyx_t_double_complex *)__pyx_v_X->data);

    /* "funtofem/TransferScheme.pyx":651
 *         cdef int nnodes = 0
 *         cdef F2FScalar *array = NULL
 *         if X is not None:             # <<<<<<<<<<<<<<
 *             nnodes = int(len(X)//3)
 *             array = <F2FScalar*>X.data
 */
  }

  /* "funtofem/TransferScheme.pyx":655
 *             array = <F2FScalar*>X.data
 * 
 *         self.ptr.setStructNodes(array, nnodes)             # <<<<<<<<<<<<<<
 * 
 *         return
 */
  __pyx_v_self->ptr->setStructNodes(__pyx_v_array, __pyx_v_nnodes);

  /* "funtofem/TransferScheme.pyx":657
 *         self.ptr.setStructNodes(array, nnodes)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":640
 *         return
 * 
 *     def setStructNodes(self, np.ndarray[F2FScalar, ndim=1, mode='c'] X):             # <<<<<<<<<<<<<<
 *         """
 *         Set and store the structural node locations in memory
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.setStructNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":659
 *         return
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Run routines (e.g. building connectivity through search, assembling
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_5initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_4initialize[] = "\n        Run routines (e.g. building connectivity through search, assembling\n        interpolation matrix, etc.) necessary to prepare transfer scheme to\n        perform load and displacement transfer\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_5initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_4initialize(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_4initialize(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "funtofem/TransferScheme.pyx":665
 *         perform load and displacement transfer
 *         """
 *         self.ptr.initialize()             # <<<<<<<<<<<<<<
 * 
 *         return
 */
  __pyx_v_self->ptr->initialize();

  /* "funtofem/TransferScheme.pyx":667
 *         self.ptr.initialize()
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def transferTemp(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":659
 *         return
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Run routines (e.g. building connectivity through search, assembling
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":669
 *         return
 * 
 *     def transferTemp(self,             # <<<<<<<<<<<<<<
 *                      np.ndarray[F2FScalar, ndim=1, mode='c'] struct_temps,
 *                      np.ndarray[F2FScalar, ndim=1, mode='c'] aero_temps):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_7transferTemp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_6transferTemp[] = "\n        Convert the input structural node displacements into aerodynamic\n        surface node displacements and store in empty input array\n\n        Parameters\n        ----------\n        struct_temps: ndarray\n            One-dimensional array of structural temperatures\n        aero_temps: ndarray\n            One-dimensional empty array of size of aerodynamic temperatures\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_7transferTemp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_struct_temps = 0;
  PyArrayObject *__pyx_v_aero_temps = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transferTemp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_struct_temps,&__pyx_n_s_aero_temps,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_temps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_temps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transferTemp", 1, 2, 2, 1); __PYX_ERR(0, 669, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transferTemp") < 0)) __PYX_ERR(0, 669, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_struct_temps = ((PyArrayObject *)values[0]);
    __pyx_v_aero_temps = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transferTemp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 669, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.transferTemp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct_temps), __pyx_ptype_5numpy_ndarray, 1, "struct_temps", 0))) __PYX_ERR(0, 670, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero_temps), __pyx_ptype_5numpy_ndarray, 1, "aero_temps", 0))) __PYX_ERR(0, 671, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_6transferTemp(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), __pyx_v_struct_temps, __pyx_v_aero_temps);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_6transferTemp(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_struct_temps, PyArrayObject *__pyx_v_aero_temps) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_aero_temps;
  __Pyx_Buffer __pyx_pybuffer_aero_temps;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_struct_temps;
  __Pyx_Buffer __pyx_pybuffer_struct_temps;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transferTemp", 0);
  __pyx_pybuffer_struct_temps.pybuffer.buf = NULL;
  __pyx_pybuffer_struct_temps.refcount = 0;
  __pyx_pybuffernd_struct_temps.data = NULL;
  __pyx_pybuffernd_struct_temps.rcbuffer = &__pyx_pybuffer_struct_temps;
  __pyx_pybuffer_aero_temps.pybuffer.buf = NULL;
  __pyx_pybuffer_aero_temps.refcount = 0;
  __pyx_pybuffernd_aero_temps.data = NULL;
  __pyx_pybuffernd_aero_temps.rcbuffer = &__pyx_pybuffer_aero_temps;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_struct_temps.rcbuffer->pybuffer, (PyObject*)__pyx_v_struct_temps, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 669, __pyx_L1_error)
  }
  __pyx_pybuffernd_struct_temps.diminfo[0].strides = __pyx_pybuffernd_struct_temps.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_struct_temps.diminfo[0].shape = __pyx_pybuffernd_struct_temps.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_aero_temps.rcbuffer->pybuffer, (PyObject*)__pyx_v_aero_temps, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 669, __pyx_L1_error)
  }
  __pyx_pybuffernd_aero_temps.diminfo[0].strides = __pyx_pybuffernd_aero_temps.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_aero_temps.diminfo[0].shape = __pyx_pybuffernd_aero_temps.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":683
 *             One-dimensional empty array of size of aerodynamic temperatures
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":684
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":685
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if struct_temps is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":686
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if struct_temps is not None:
 *             struct_len = len(struct_temps)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":687
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_temps is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_temps)
 *             struct_array = <F2FScalar*>struct_temps.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_struct_temps) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":688
 *         cdef int aero_len = 0
 *         if struct_temps is not None:
 *             struct_len = len(struct_temps)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>struct_temps.data
 *         if aero_temps is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_struct_temps)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 688, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":689
 *         if struct_temps is not None:
 *             struct_len = len(struct_temps)
 *             struct_array = <F2FScalar*>struct_temps.data             # <<<<<<<<<<<<<<
 *         if aero_temps is not None:
 *             aero_len = len(aero_temps)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_struct_temps->data);

    /* "funtofem/TransferScheme.pyx":687
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_temps is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_temps)
 *             struct_array = <F2FScalar*>struct_temps.data
 */
  }

  /* "funtofem/TransferScheme.pyx":690
 *             struct_len = len(struct_temps)
 *             struct_array = <F2FScalar*>struct_temps.data
 *         if aero_temps is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_temps)
 *             aero_array = <F2FScalar*>aero_temps.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_aero_temps) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":691
 *             struct_array = <F2FScalar*>struct_temps.data
 *         if aero_temps is not None:
 *             aero_len = len(aero_temps)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>aero_temps.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_aero_temps)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 691, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":692
 *         if aero_temps is not None:
 *             aero_len = len(aero_temps)
 *             aero_array = <F2FScalar*>aero_temps.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_aero_temps->data);

    /* "funtofem/TransferScheme.pyx":690
 *             struct_len = len(struct_temps)
 *             struct_array = <F2FScalar*>struct_temps.data
 *         if aero_temps is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_temps)
 *             aero_array = <F2FScalar*>aero_temps.data
 */
  }

  /* "funtofem/TransferScheme.pyx":694
 *             aero_array = <F2FScalar*>aero_temps.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":695
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 695, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":694
 *             aero_array = <F2FScalar*>aero_temps.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":696
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":697
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.transferTemp(struct_array, aero_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 697, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":696
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":699
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 *         self.ptr.transferTemp(struct_array, aero_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->transferTemp(__pyx_v_struct_array, __pyx_v_aero_array);

  /* "funtofem/TransferScheme.pyx":700
 * 
 *         self.ptr.transferTemp(struct_array, aero_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def transferFlux(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":669
 *         return
 * 
 *     def transferTemp(self,             # <<<<<<<<<<<<<<
 *                      np.ndarray[F2FScalar, ndim=1, mode='c'] struct_temps,
 *                      np.ndarray[F2FScalar, ndim=1, mode='c'] aero_temps):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_temps.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_temps.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.transferTemp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_temps.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_temps.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":702
 *         return
 * 
 *     def transferFlux(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_flux,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_flux):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_9transferFlux(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_8transferFlux[] = "\n        Convert the input aerodynamic surface loads into structural loads and\n        store in empty input array\n\n        Parameters\n        ----------\n        aero_flux: ndarray\n            One-dimensional array of aerodynamic surface heat flux\n        struct_flux: ndarray\n            One-dimensional empty array of size of structural heat flux\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_9transferFlux(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_aero_flux = 0;
  PyArrayObject *__pyx_v_struct_flux = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transferFlux (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aero_flux,&__pyx_n_s_struct_flux,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_flux)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_flux)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transferFlux", 1, 2, 2, 1); __PYX_ERR(0, 702, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transferFlux") < 0)) __PYX_ERR(0, 702, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_aero_flux = ((PyArrayObject *)values[0]);
    __pyx_v_struct_flux = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transferFlux", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 702, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.transferFlux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero_flux), __pyx_ptype_5numpy_ndarray, 1, "aero_flux", 0))) __PYX_ERR(0, 703, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct_flux), __pyx_ptype_5numpy_ndarray, 1, "struct_flux", 0))) __PYX_ERR(0, 704, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_8transferFlux(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), __pyx_v_aero_flux, __pyx_v_struct_flux);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_8transferFlux(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_aero_flux, PyArrayObject *__pyx_v_struct_flux) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_aero_flux;
  __Pyx_Buffer __pyx_pybuffer_aero_flux;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_struct_flux;
  __Pyx_Buffer __pyx_pybuffer_struct_flux;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transferFlux", 0);
  __pyx_pybuffer_aero_flux.pybuffer.buf = NULL;
  __pyx_pybuffer_aero_flux.refcount = 0;
  __pyx_pybuffernd_aero_flux.data = NULL;
  __pyx_pybuffernd_aero_flux.rcbuffer = &__pyx_pybuffer_aero_flux;
  __pyx_pybuffer_struct_flux.pybuffer.buf = NULL;
  __pyx_pybuffer_struct_flux.refcount = 0;
  __pyx_pybuffernd_struct_flux.data = NULL;
  __pyx_pybuffernd_struct_flux.rcbuffer = &__pyx_pybuffer_struct_flux;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_aero_flux.rcbuffer->pybuffer, (PyObject*)__pyx_v_aero_flux, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 702, __pyx_L1_error)
  }
  __pyx_pybuffernd_aero_flux.diminfo[0].strides = __pyx_pybuffernd_aero_flux.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_aero_flux.diminfo[0].shape = __pyx_pybuffernd_aero_flux.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_struct_flux.rcbuffer->pybuffer, (PyObject*)__pyx_v_struct_flux, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 702, __pyx_L1_error)
  }
  __pyx_pybuffernd_struct_flux.diminfo[0].strides = __pyx_pybuffernd_struct_flux.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_struct_flux.diminfo[0].shape = __pyx_pybuffernd_struct_flux.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":716
 *             One-dimensional empty array of size of structural heat flux
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":717
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":718
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if struct_flux is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":719
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if struct_flux is not None:
 *             struct_len = len(struct_flux)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":720
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_flux is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_flux)
 *             struct_array = <F2FScalar*>struct_flux.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_struct_flux) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":721
 *         cdef int aero_len = 0
 *         if struct_flux is not None:
 *             struct_len = len(struct_flux)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>struct_flux.data
 *         if aero_flux is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_struct_flux)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 721, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":722
 *         if struct_flux is not None:
 *             struct_len = len(struct_flux)
 *             struct_array = <F2FScalar*>struct_flux.data             # <<<<<<<<<<<<<<
 *         if aero_flux is not None:
 *             aero_len = len(aero_flux)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_struct_flux->data);

    /* "funtofem/TransferScheme.pyx":720
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_flux is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_flux)
 *             struct_array = <F2FScalar*>struct_flux.data
 */
  }

  /* "funtofem/TransferScheme.pyx":723
 *             struct_len = len(struct_flux)
 *             struct_array = <F2FScalar*>struct_flux.data
 *         if aero_flux is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_flux)
 *             aero_array = <F2FScalar*>aero_flux.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_aero_flux) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":724
 *             struct_array = <F2FScalar*>struct_flux.data
 *         if aero_flux is not None:
 *             aero_len = len(aero_flux)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>aero_flux.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_aero_flux)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 724, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":725
 *         if aero_flux is not None:
 *             aero_len = len(aero_flux)
 *             aero_array = <F2FScalar*>aero_flux.data             # <<<<<<<<<<<<<<
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_aero_flux->data);

    /* "funtofem/TransferScheme.pyx":723
 *             struct_len = len(struct_flux)
 *             struct_array = <F2FScalar*>struct_flux.data
 *         if aero_flux is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_flux)
 *             aero_array = <F2FScalar*>aero_flux.data
 */
  }

  /* "funtofem/TransferScheme.pyx":727
 *             aero_array = <F2FScalar*>aero_flux.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  __pyx_t_1 = ((__pyx_v_struct_len != __pyx_v_self->ptr->getLocalStructArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":728
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 728, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":727
 *             aero_array = <F2FScalar*>aero_flux.data
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 */
  }

  /* "funtofem/TransferScheme.pyx":729
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  __pyx_t_1 = ((__pyx_v_aero_len != __pyx_v_self->ptr->getLocalAeroArrayLen()) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "funtofem/TransferScheme.pyx":730
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.transferFlux(aero_array, struct_array)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 730, __pyx_L1_error)

    /* "funtofem/TransferScheme.pyx":729
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():             # <<<<<<<<<<<<<<
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 */
  }

  /* "funtofem/TransferScheme.pyx":732
 *             raise ValueError("Aerodynamic array incorrect length")
 * 
 *         self.ptr.transferFlux(aero_array, struct_array)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->transferFlux(__pyx_v_aero_array, __pyx_v_struct_array);

  /* "funtofem/TransferScheme.pyx":733
 * 
 *         self.ptr.transferFlux(aero_array, struct_array)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydTdtS(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":702
 *         return
 * 
 *     def transferFlux(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_flux,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_flux):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_flux.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_flux.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.transferFlux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_flux.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_flux.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":735
 *         return
 * 
 *     def applydTdtS(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_11applydTdtS(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_10applydTdtS[] = "\n        Apply the action of the Jacobian containing the derivatives of the\n        displacement transfer residuals with respect to the structural\n        displacements to an input vector and stores the products in empty\n        input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of structural displacements\n        p: ndarray\n            One-dimensional empty array of size of aerodynamic displacements\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_11applydTdtS(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydTdtS (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydTdtS", 1, 2, 2, 1); __PYX_ERR(0, 735, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydTdtS") < 0)) __PYX_ERR(0, 735, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydTdtS", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 735, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.applydTdtS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 735, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 736, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_10applydTdtS(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_10applydTdtS(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydTdtS", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 735, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 735, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":751
 *         """
 * 
 *         self.ptr.applydTdtS(<F2FScalar*>v.data, <F2FScalar*>p.data)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydTdtS(((__pyx_t_double_complex *)__pyx_v_v->data), ((__pyx_t_double_complex *)__pyx_v_p->data));

  /* "funtofem/TransferScheme.pyx":752
 * 
 *         self.ptr.applydTdtS(<F2FScalar*>v.data, <F2FScalar*>p.data)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydTdtSTrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":735
 *         return
 * 
 *     def applydTdtS(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.applydTdtS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":754
 *         return
 * 
 *     def applydTdtSTrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_13applydTdtSTrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_12applydTdtSTrans[] = "\n        Apply the action of the transpose of the Jacobian containing the\n        derivatives of the displacement transfer residuals with respect to the\n        structural displacements to an input vector and store the products in\n        empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of aerodynamic displacements\n        p: ndarray\n            One-dimensional empty array of size of structural displacements\n\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_13applydTdtSTrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydTdtSTrans (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydTdtSTrans", 1, 2, 2, 1); __PYX_ERR(0, 754, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydTdtSTrans") < 0)) __PYX_ERR(0, 754, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydTdtSTrans", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 754, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.applydTdtSTrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 754, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 755, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_12applydTdtSTrans(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_12applydTdtSTrans(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydTdtSTrans", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 754, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 754, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":770
 * 
 *         """
 *         self.ptr.applydTdtSTrans(<F2FScalar*>v.data, <F2FScalar*>p.data)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydTdtSTrans(((__pyx_t_double_complex *)__pyx_v_v->data), ((__pyx_t_double_complex *)__pyx_v_p->data));

  /* "funtofem/TransferScheme.pyx":771
 *         """
 *         self.ptr.applydTdtSTrans(<F2FScalar*>v.data, <F2FScalar*>p.data)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydQdqA(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":754
 *         return
 * 
 *     def applydTdtSTrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.applydTdtSTrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":773
 *         return
 * 
 *     def applydQdqA(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_15applydQdqA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_14applydQdqA[] = "\n        Apply the action of the Jacobian containing the derivatives of the load\n        transfer residuals with respect to the structural displacements to an\n        input vector and store the products in empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of structural displacements\n        p: ndarray\n            One-dimensional empty array of size of structural loads\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_15applydQdqA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydQdqA (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydQdqA", 1, 2, 2, 1); __PYX_ERR(0, 773, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydQdqA") < 0)) __PYX_ERR(0, 773, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydQdqA", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 773, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.applydQdqA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 773, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 774, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_14applydQdqA(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_14applydQdqA(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydQdqA", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 773, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 773, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":787
 *             One-dimensional empty array of size of structural loads
 *         """
 *         self.ptr.applydQdqA(<F2FScalar*>v.data, <F2FScalar*>p.data)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydQdqA(((__pyx_t_double_complex *)__pyx_v_v->data), ((__pyx_t_double_complex *)__pyx_v_p->data));

  /* "funtofem/TransferScheme.pyx":788
 *         """
 *         self.ptr.applydQdqA(<F2FScalar*>v.data, <F2FScalar*>p.data)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def applydQdqATrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":773
 *         return
 * 
 *     def applydQdqA(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                    np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.applydQdqA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":790
 *         return
 * 
 *     def applydQdqATrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_17applydQdqATrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_16applydQdqATrans[] = "\n        Apply the action of the transpose of the Jacobian containing the\n        derivatives of the load transfer residuals with respect to the\n        structural displacements to an input vector and store the products in\n        empty input array\n\n        Parameters\n        ----------\n        v: ndarray\n            One-dimensional array of size of structural loads\n        p: ndarray\n            One-dimensional empty array of size of structural displacements\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_17applydQdqATrans(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_v = 0;
  PyArrayObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applydQdqATrans (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applydQdqATrans", 1, 2, 2, 1); __PYX_ERR(0, 790, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applydQdqATrans") < 0)) __PYX_ERR(0, 790, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v = ((PyArrayObject *)values[0]);
    __pyx_v_p = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applydQdqATrans", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 790, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.applydQdqATrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_5numpy_ndarray, 1, "v", 0))) __PYX_ERR(0, 790, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(0, 791, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_16applydQdqATrans(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), __pyx_v_v, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_16applydQdqATrans(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_v, PyArrayObject *__pyx_v_p) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_v;
  __Pyx_Buffer __pyx_pybuffer_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applydQdqATrans", 0);
  __pyx_pybuffer_v.pybuffer.buf = NULL;
  __pyx_pybuffer_v.refcount = 0;
  __pyx_pybuffernd_v.data = NULL;
  __pyx_pybuffernd_v.rcbuffer = &__pyx_pybuffer_v;
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_v.rcbuffer->pybuffer, (PyObject*)__pyx_v_v, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 790, __pyx_L1_error)
  }
  __pyx_pybuffernd_v.diminfo[0].strides = __pyx_pybuffernd_v.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_v.diminfo[0].shape = __pyx_pybuffernd_v.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 790, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":805
 *             One-dimensional empty array of size of structural displacements
 *         """
 *         self.ptr.applydQdqATrans(<F2FScalar*>v.data, <F2FScalar*>p.data)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->ptr->applydQdqATrans(((__pyx_t_double_complex *)__pyx_v_v->data), ((__pyx_t_double_complex *)__pyx_v_p->data));

  /* "funtofem/TransferScheme.pyx":806
 *         """
 *         self.ptr.applydQdqATrans(<F2FScalar*>v.data, <F2FScalar*>p.data)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def testAllDerivatives(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":790
 *         return
 * 
 *     def applydQdqATrans(self, np.ndarray[F2FScalar, ndim=1, mode='c'] v,             # <<<<<<<<<<<<<<
 *                         np.ndarray[F2FScalar, ndim=1, mode='c'] p):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.applydQdqATrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_v.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":808
 *         return
 * 
 *     def testAllDerivatives(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_disps,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_loads,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_19testAllDerivatives(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_18testAllDerivatives[] = "\n        Test the output of :meth:`transferLoads` by comparison with results from\n        finite difference approximation or complex step approximation\n\n        Parameters\n        ----------\n        struct_disps: ndarray\n            One-dimensional array of structural displacements\n        aero_loads: ndarray\n            One-dimensional array of aerodynamic loads\n        h: float\n            Step size (for finite difference or complex step)\n        rtol: float\n            Relative error tolerance used in the test\n        atol: float\n            Absolute error tolerance used in the test\n        ";
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_19testAllDerivatives(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_struct_disps = 0;
  PyArrayObject *__pyx_v_aero_loads = 0;
  __pyx_t_double_complex __pyx_v_h;
  double __pyx_v_rtol;
  double __pyx_v_atol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testAllDerivatives (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_struct_disps,&__pyx_n_s_aero_loads,&__pyx_n_s_h,&__pyx_n_s_rtol,&__pyx_n_s_atol,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_disps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_loads)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("testAllDerivatives", 0, 3, 5, 1); __PYX_ERR(0, 808, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("testAllDerivatives", 0, 3, 5, 2); __PYX_ERR(0, 808, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rtol);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atol);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "testAllDerivatives") < 0)) __PYX_ERR(0, 808, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_struct_disps = ((PyArrayObject *)values[0]);
    __pyx_v_aero_loads = ((PyArrayObject *)values[1]);
    __pyx_v_h = __Pyx_PyComplex_As___pyx_t_double_complex(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 811, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_rtol = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_rtol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 811, __pyx_L3_error)
    } else {
      __pyx_v_rtol = ((double)1e-6);
    }
    if (values[4]) {
      __pyx_v_atol = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_atol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 811, __pyx_L3_error)
    } else {
      __pyx_v_atol = ((double)1e-30);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("testAllDerivatives", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 808, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.testAllDerivatives", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct_disps), __pyx_ptype_5numpy_ndarray, 1, "struct_disps", 0))) __PYX_ERR(0, 809, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero_loads), __pyx_ptype_5numpy_ndarray, 1, "aero_loads", 0))) __PYX_ERR(0, 810, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_18testAllDerivatives(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), __pyx_v_struct_disps, __pyx_v_aero_loads, __pyx_v_h, __pyx_v_rtol, __pyx_v_atol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_18testAllDerivatives(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, PyArrayObject *__pyx_v_struct_disps, PyArrayObject *__pyx_v_aero_loads, __pyx_t_double_complex __pyx_v_h, double __pyx_v_rtol, double __pyx_v_atol) {
  __pyx_t_double_complex *__pyx_v_struct_array;
  CYTHON_UNUSED int __pyx_v_struct_len;
  __pyx_t_double_complex *__pyx_v_aero_array;
  CYTHON_UNUSED int __pyx_v_aero_len;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_aero_loads;
  __Pyx_Buffer __pyx_pybuffer_aero_loads;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_struct_disps;
  __Pyx_Buffer __pyx_pybuffer_struct_disps;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("testAllDerivatives", 0);
  __pyx_pybuffer_struct_disps.pybuffer.buf = NULL;
  __pyx_pybuffer_struct_disps.refcount = 0;
  __pyx_pybuffernd_struct_disps.data = NULL;
  __pyx_pybuffernd_struct_disps.rcbuffer = &__pyx_pybuffer_struct_disps;
  __pyx_pybuffer_aero_loads.pybuffer.buf = NULL;
  __pyx_pybuffer_aero_loads.refcount = 0;
  __pyx_pybuffernd_aero_loads.data = NULL;
  __pyx_pybuffernd_aero_loads.rcbuffer = &__pyx_pybuffer_aero_loads;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_struct_disps.rcbuffer->pybuffer, (PyObject*)__pyx_v_struct_disps, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 808, __pyx_L1_error)
  }
  __pyx_pybuffernd_struct_disps.diminfo[0].strides = __pyx_pybuffernd_struct_disps.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_struct_disps.diminfo[0].shape = __pyx_pybuffernd_struct_disps.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_aero_loads.rcbuffer->pybuffer, (PyObject*)__pyx_v_aero_loads, &__Pyx_TypeInfo___pyx_t_double_complex, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 808, __pyx_L1_error)
  }
  __pyx_pybuffernd_aero_loads.diminfo[0].strides = __pyx_pybuffernd_aero_loads.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_aero_loads.diminfo[0].shape = __pyx_pybuffernd_aero_loads.rcbuffer->pybuffer.shape[0];

  /* "funtofem/TransferScheme.pyx":829
 *             Absolute error tolerance used in the test
 *         """
 *         cdef F2FScalar *struct_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 */
  __pyx_v_struct_array = NULL;

  /* "funtofem/TransferScheme.pyx":830
 *         """
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0             # <<<<<<<<<<<<<<
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 */
  __pyx_v_struct_len = 0;

  /* "funtofem/TransferScheme.pyx":831
 *         cdef F2FScalar *struct_array = NULL
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL             # <<<<<<<<<<<<<<
 *         cdef int aero_len = 0
 *         if struct_disps is not None:
 */
  __pyx_v_aero_array = NULL;

  /* "funtofem/TransferScheme.pyx":832
 *         cdef int struct_len = 0
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0             # <<<<<<<<<<<<<<
 *         if struct_disps is not None:
 *             struct_len = len(struct_disps)
 */
  __pyx_v_aero_len = 0;

  /* "funtofem/TransferScheme.pyx":833
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_disps is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_struct_disps) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "funtofem/TransferScheme.pyx":834
 *         cdef int aero_len = 0
 *         if struct_disps is not None:
 *             struct_len = len(struct_disps)             # <<<<<<<<<<<<<<
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_loads is not None:
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_struct_disps)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 834, __pyx_L1_error)
    __pyx_v_struct_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":835
 *         if struct_disps is not None:
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data             # <<<<<<<<<<<<<<
 *         if aero_loads is not None:
 *             aero_len = len(aero_loads)
 */
    __pyx_v_struct_array = ((__pyx_t_double_complex *)__pyx_v_struct_disps->data);

    /* "funtofem/TransferScheme.pyx":833
 *         cdef F2FScalar *aero_array = NULL
 *         cdef int aero_len = 0
 *         if struct_disps is not None:             # <<<<<<<<<<<<<<
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 */
  }

  /* "funtofem/TransferScheme.pyx":836
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_loads is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_loads)
 *             aero_array = <F2FScalar*>aero_loads.data
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_aero_loads) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "funtofem/TransferScheme.pyx":837
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_loads is not None:
 *             aero_len = len(aero_loads)             # <<<<<<<<<<<<<<
 *             aero_array = <F2FScalar*>aero_loads.data
 * 
 */
    __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_aero_loads)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 837, __pyx_L1_error)
    __pyx_v_aero_len = __pyx_t_3;

    /* "funtofem/TransferScheme.pyx":838
 *         if aero_loads is not None:
 *             aero_len = len(aero_loads)
 *             aero_array = <F2FScalar*>aero_loads.data             # <<<<<<<<<<<<<<
 * 
 *         return self.ptr.testAllDerivatives(struct_array, aero_array, h, rtol, atol)
 */
    __pyx_v_aero_array = ((__pyx_t_double_complex *)__pyx_v_aero_loads->data);

    /* "funtofem/TransferScheme.pyx":836
 *             struct_len = len(struct_disps)
 *             struct_array = <F2FScalar*>struct_disps.data
 *         if aero_loads is not None:             # <<<<<<<<<<<<<<
 *             aero_len = len(aero_loads)
 *             aero_array = <F2FScalar*>aero_loads.data
 */
  }

  /* "funtofem/TransferScheme.pyx":840
 *             aero_array = <F2FScalar*>aero_loads.data
 * 
 *         return self.ptr.testAllDerivatives(struct_array, aero_array, h, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->ptr->testAllDerivatives(__pyx_v_struct_array, __pyx_v_aero_array, __pyx_t_double_complex_from_parts(__Pyx_CREAL(__pyx_v_h), __Pyx_CIMAG(__pyx_v_h)), __pyx_v_rtol, __pyx_v_atol)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":808
 *         return
 * 
 *     def testAllDerivatives(self,             # <<<<<<<<<<<<<<
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] struct_disps,
 *             np.ndarray[F2FScalar, ndim=1, mode='c'] aero_loads,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_loads.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_disps.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.testAllDerivatives", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_aero_loads.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_struct_disps.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_20__reduce_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_22__setstate_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_17pyThermalTransfer_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyThermalTransfer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":874
 *         weighting decay parameter
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

/* Python wrapper */
static int __pyx_pw_8funtofem_14TransferScheme_6pyMELD_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8funtofem_14TransferScheme_6pyMELD_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyMPICommObject *__pyx_v_comm = 0;
  struct PyMPICommObject *__pyx_v_struct = 0;
  int __pyx_v_struct_root;
  struct PyMPICommObject *__pyx_v_aero = 0;
  int __pyx_v_aero_root;
  int __pyx_v_symmetry;
  int __pyx_v_num_nearest;
  __pyx_t_double_complex __pyx_v_beta;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_comm,&__pyx_n_s_struct,&__pyx_n_s_struct_root,&__pyx_n_s_aero,&__pyx_n_s_aero_root,&__pyx_n_s_symmetry,&__pyx_n_s_num_nearest,&__pyx_n_s_beta,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_comm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 1); __PYX_ERR(0, 874, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 2); __PYX_ERR(0, 874, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 3); __PYX_ERR(0, 874, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 4); __PYX_ERR(0, 874, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_symmetry)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 5); __PYX_ERR(0, 874, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_nearest)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 6); __PYX_ERR(0, 874, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 7); __PYX_ERR(0, 874, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 874, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_comm = ((struct PyMPICommObject *)values[0]);
    __pyx_v_struct = ((struct PyMPICommObject *)values[1]);
    __pyx_v_struct_root = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_struct_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 875, __pyx_L3_error)
    __pyx_v_aero = ((struct PyMPICommObject *)values[3]);
    __pyx_v_aero_root = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_aero_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 876, __pyx_L3_error)
    __pyx_v_symmetry = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_symmetry == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 877, __pyx_L3_error)
    __pyx_v_num_nearest = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_num_nearest == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 877, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_double_complex(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 874, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyMELD.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_comm), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "comm", 0))) __PYX_ERR(0, 874, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "struct", 0))) __PYX_ERR(0, 875, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "aero", 0))) __PYX_ERR(0, 876, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_6pyMELD___cinit__(((struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *)__pyx_v_self), __pyx_v_comm, __pyx_v_struct, __pyx_v_struct_root, __pyx_v_aero, __pyx_v_aero_root, __pyx_v_symmetry, __pyx_v_num_nearest, __pyx_v_beta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8funtofem_14TransferScheme_6pyMELD___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, int __pyx_v_symmetry, int __pyx_v_num_nearest, __pyx_t_double_complex __pyx_v_beta) {
  MPI_Comm __pyx_v_c_comm;
  MPI_Comm __pyx_v_struct_comm;
  MPI_Comm __pyx_v_aero_comm;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  MPI_Comm __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "funtofem/TransferScheme.pyx":879
 *                   int symmetry, int num_nearest,
 *                   F2FScalar beta):
 *         cdef MPI_Comm c_comm = comm.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 */
  __pyx_t_1 = __pyx_v_comm->ob_mpi;
  __pyx_v_c_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":880
 *                   F2FScalar beta):
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 * 
 */
  __pyx_t_1 = __pyx_v_struct->ob_mpi;
  __pyx_v_struct_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":881
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi             # <<<<<<<<<<<<<<
 * 
 *         # Allocate the underlying class
 */
  __pyx_t_1 = __pyx_v_aero->ob_mpi;
  __pyx_v_aero_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":884
 * 
 *         # Allocate the underlying class
 *         self.ptr = new MELD(c_comm, struct_comm, struct_root,             # <<<<<<<<<<<<<<
 *                             aero_comm, aero_root, symmetry,
 *                             num_nearest, beta)
 */
  __pyx_v_self->__pyx_base.ptr = new MELD(__pyx_v_c_comm, __pyx_v_struct_comm, __pyx_v_struct_root, __pyx_v_aero_comm, __pyx_v_aero_root, __pyx_v_symmetry, __pyx_v_num_nearest, __pyx_v_beta);

  /* "funtofem/TransferScheme.pyx":888
 *                             num_nearest, beta)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":874
 *         weighting decay parameter
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":890
 *         return
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8funtofem_14TransferScheme_6pyMELD_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8funtofem_14TransferScheme_6pyMELD_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8funtofem_14TransferScheme_6pyMELD_2__dealloc__(((struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8funtofem_14TransferScheme_6pyMELD_2__dealloc__(struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "funtofem/TransferScheme.pyx":891
 * 
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 * 
 * cdef class pyMELDThermal(pyThermalTransfer):
 */
  delete __pyx_v_self->__pyx_base.ptr;

  /* "funtofem/TransferScheme.pyx":890
 *         return
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_6pyMELD_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_6pyMELD_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_6pyMELD_4__reduce_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_6pyMELD_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyMELD.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_6pyMELD_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_6pyMELD_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_6pyMELD_6__setstate_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_6pyMELD_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyMELD *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyMELD.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":926
 *         weighting decay parameter
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

/* Python wrapper */
static int __pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyMPICommObject *__pyx_v_comm = 0;
  struct PyMPICommObject *__pyx_v_struct = 0;
  int __pyx_v_struct_root;
  struct PyMPICommObject *__pyx_v_aero = 0;
  int __pyx_v_aero_root;
  int __pyx_v_symmetry;
  int __pyx_v_num_nearest;
  __pyx_t_double_complex __pyx_v_beta;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_comm,&__pyx_n_s_struct,&__pyx_n_s_struct_root,&__pyx_n_s_aero,&__pyx_n_s_aero_root,&__pyx_n_s_symmetry,&__pyx_n_s_num_nearest,&__pyx_n_s_beta,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_comm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 1); __PYX_ERR(0, 926, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 2); __PYX_ERR(0, 926, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 3); __PYX_ERR(0, 926, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 4); __PYX_ERR(0, 926, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_symmetry)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 5); __PYX_ERR(0, 926, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_nearest)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 6); __PYX_ERR(0, 926, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 7); __PYX_ERR(0, 926, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 926, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_comm = ((struct PyMPICommObject *)values[0]);
    __pyx_v_struct = ((struct PyMPICommObject *)values[1]);
    __pyx_v_struct_root = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_struct_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 927, __pyx_L3_error)
    __pyx_v_aero = ((struct PyMPICommObject *)values[3]);
    __pyx_v_aero_root = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_aero_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 928, __pyx_L3_error)
    __pyx_v_symmetry = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_symmetry == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
    __pyx_v_num_nearest = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_num_nearest == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_double_complex(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 930, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 926, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyMELDThermal.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_comm), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "comm", 0))) __PYX_ERR(0, 926, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "struct", 0))) __PYX_ERR(0, 927, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "aero", 0))) __PYX_ERR(0, 928, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal___cinit__(((struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *)__pyx_v_self), __pyx_v_comm, __pyx_v_struct, __pyx_v_struct_root, __pyx_v_aero, __pyx_v_aero_root, __pyx_v_symmetry, __pyx_v_num_nearest, __pyx_v_beta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, int __pyx_v_symmetry, int __pyx_v_num_nearest, __pyx_t_double_complex __pyx_v_beta) {
  MPI_Comm __pyx_v_c_comm;
  MPI_Comm __pyx_v_struct_comm;
  MPI_Comm __pyx_v_aero_comm;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  MPI_Comm __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "funtofem/TransferScheme.pyx":931
 *                   int symmetry, int num_nearest,
 *                   F2FScalar beta):
 *         cdef MPI_Comm c_comm = comm.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 */
  __pyx_t_1 = __pyx_v_comm->ob_mpi;
  __pyx_v_c_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":932
 *                   F2FScalar beta):
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 * 
 */
  __pyx_t_1 = __pyx_v_struct->ob_mpi;
  __pyx_v_struct_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":933
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi             # <<<<<<<<<<<<<<
 * 
 *         # Allocate the underlying class
 */
  __pyx_t_1 = __pyx_v_aero->ob_mpi;
  __pyx_v_aero_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":936
 * 
 *         # Allocate the underlying class
 *         self.ptr = new MELDThermal(c_comm, struct_comm, struct_root,             # <<<<<<<<<<<<<<
 *                                    aero_comm, aero_root, symmetry,
 *                                    num_nearest, beta)
 */
  __pyx_v_self->__pyx_base.ptr = new MELDThermal(__pyx_v_c_comm, __pyx_v_struct_comm, __pyx_v_struct_root, __pyx_v_aero_comm, __pyx_v_aero_root, __pyx_v_symmetry, __pyx_v_num_nearest, __pyx_v_beta);

  /* "funtofem/TransferScheme.pyx":940
 *                                    num_nearest, beta)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":926
 *         weighting decay parameter
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":942
 *         return
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal_2__dealloc__(((struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal_2__dealloc__(struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "funtofem/TransferScheme.pyx":943
 * 
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 * 
 * cdef class pyLinearizedMELD(pyTransferScheme):
 */
  delete __pyx_v_self->__pyx_base.ptr;

  /* "funtofem/TransferScheme.pyx":942
 *         return
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal_4__reduce_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyMELDThermal.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal_6__setstate_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_13pyMELDThermal_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyMELDThermal.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":970
 *         weighting decay parameter
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

/* Python wrapper */
static int __pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyMPICommObject *__pyx_v_comm = 0;
  struct PyMPICommObject *__pyx_v_struct = 0;
  int __pyx_v_struct_root;
  struct PyMPICommObject *__pyx_v_aero = 0;
  int __pyx_v_aero_root;
  int __pyx_v_symmetry;
  int __pyx_v_num_nearest;
  __pyx_t_double_complex __pyx_v_beta;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_comm,&__pyx_n_s_struct,&__pyx_n_s_struct_root,&__pyx_n_s_aero,&__pyx_n_s_aero_root,&__pyx_n_s_symmetry,&__pyx_n_s_num_nearest,&__pyx_n_s_beta,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_comm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 1); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 2); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 3); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 4); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_symmetry)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 5); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_nearest)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 6); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 7); __PYX_ERR(0, 970, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 970, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_comm = ((struct PyMPICommObject *)values[0]);
    __pyx_v_struct = ((struct PyMPICommObject *)values[1]);
    __pyx_v_struct_root = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_struct_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L3_error)
    __pyx_v_aero = ((struct PyMPICommObject *)values[3]);
    __pyx_v_aero_root = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_aero_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
    __pyx_v_symmetry = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_symmetry == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 973, __pyx_L3_error)
    __pyx_v_num_nearest = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_num_nearest == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 973, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_double_complex(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 973, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 970, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyLinearizedMELD.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_comm), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "comm", 0))) __PYX_ERR(0, 970, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "struct", 0))) __PYX_ERR(0, 971, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "aero", 0))) __PYX_ERR(0, 972, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD___cinit__(((struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *)__pyx_v_self), __pyx_v_comm, __pyx_v_struct, __pyx_v_struct_root, __pyx_v_aero, __pyx_v_aero_root, __pyx_v_symmetry, __pyx_v_num_nearest, __pyx_v_beta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, int __pyx_v_symmetry, int __pyx_v_num_nearest, __pyx_t_double_complex __pyx_v_beta) {
  MPI_Comm __pyx_v_c_comm;
  MPI_Comm __pyx_v_struct_comm;
  MPI_Comm __pyx_v_aero_comm;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  MPI_Comm __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "funtofem/TransferScheme.pyx":974
 *                   MPI.Comm aero, int aero_root,
 *                   int symmetry, int num_nearest, F2FScalar beta):
 *         cdef MPI_Comm c_comm = comm.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 */
  __pyx_t_1 = __pyx_v_comm->ob_mpi;
  __pyx_v_c_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":975
 *                   int symmetry, int num_nearest, F2FScalar beta):
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 * 
 */
  __pyx_t_1 = __pyx_v_struct->ob_mpi;
  __pyx_v_struct_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":976
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi             # <<<<<<<<<<<<<<
 * 
 *         # Allocate the underlying class
 */
  __pyx_t_1 = __pyx_v_aero->ob_mpi;
  __pyx_v_aero_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":979
 * 
 *         # Allocate the underlying class
 *         self.ptr = new LinearizedMELD(c_comm, struct_comm, struct_root,             # <<<<<<<<<<<<<<
 *                                       aero_comm, aero_root,
 *                                       symmetry, num_nearest, beta)
 */
  __pyx_v_self->__pyx_base.ptr = new LinearizedMELD(__pyx_v_c_comm, __pyx_v_struct_comm, __pyx_v_struct_root, __pyx_v_aero_comm, __pyx_v_aero_root, __pyx_v_symmetry, __pyx_v_num_nearest, __pyx_v_beta);

  /* "funtofem/TransferScheme.pyx":983
 *                                       symmetry, num_nearest, beta)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":970
 *         weighting decay parameter
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":985
 *         return
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD_2__dealloc__(((struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD_2__dealloc__(struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "funtofem/TransferScheme.pyx":986
 * 
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 * 
 * PY_GAUSSIAN = GAUSSIAN
 */
  delete __pyx_v_self->__pyx_base.ptr;

  /* "funtofem/TransferScheme.pyx":985
 *         return
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD_4__reduce_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyLinearizedMELD.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD_6__setstate_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_16pyLinearizedMELD_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyLinearizedMELD.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":1016
 *         from each node)
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

/* Python wrapper */
static int __pyx_pw_8funtofem_14TransferScheme_5pyRBF_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8funtofem_14TransferScheme_5pyRBF_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyMPICommObject *__pyx_v_comm = 0;
  struct PyMPICommObject *__pyx_v_struct = 0;
  int __pyx_v_struct_root;
  struct PyMPICommObject *__pyx_v_aero = 0;
  int __pyx_v_aero_root;
  enum RBF::RbfType __pyx_v_rbf_type;
  int __pyx_v_sampling_ratio;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_comm,&__pyx_n_s_struct,&__pyx_n_s_struct_root,&__pyx_n_s_aero,&__pyx_n_s_aero_root,&__pyx_n_s_rbf_type,&__pyx_n_s_sampling_ratio,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_comm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 1); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 2); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 3); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 4); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rbf_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 5); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sampling_ratio)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 6); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1016, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_comm = ((struct PyMPICommObject *)values[0]);
    __pyx_v_struct = ((struct PyMPICommObject *)values[1]);
    __pyx_v_struct_root = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_struct_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L3_error)
    __pyx_v_aero = ((struct PyMPICommObject *)values[3]);
    __pyx_v_aero_root = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_aero_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L3_error)
    __pyx_v_rbf_type = ((enum RBF::RbfType)__Pyx_PyInt_As_enum__RBF_3a__3a_RbfType(values[5])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L3_error)
    __pyx_v_sampling_ratio = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_sampling_ratio == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1016, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyRBF.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_comm), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "comm", 0))) __PYX_ERR(0, 1016, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "struct", 0))) __PYX_ERR(0, 1017, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "aero", 0))) __PYX_ERR(0, 1018, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_5pyRBF___cinit__(((struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *)__pyx_v_self), __pyx_v_comm, __pyx_v_struct, __pyx_v_struct_root, __pyx_v_aero, __pyx_v_aero_root, __pyx_v_rbf_type, __pyx_v_sampling_ratio);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8funtofem_14TransferScheme_5pyRBF___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, enum RBF::RbfType __pyx_v_rbf_type, int __pyx_v_sampling_ratio) {
  MPI_Comm __pyx_v_c_comm;
  MPI_Comm __pyx_v_struct_comm;
  MPI_Comm __pyx_v_aero_comm;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  MPI_Comm __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "funtofem/TransferScheme.pyx":1036
 * 
 *         """
 *         cdef MPI_Comm c_comm = comm.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 */
  __pyx_t_1 = __pyx_v_comm->ob_mpi;
  __pyx_v_c_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":1037
 *         """
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 * 
 */
  __pyx_t_1 = __pyx_v_struct->ob_mpi;
  __pyx_v_struct_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":1038
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi             # <<<<<<<<<<<<<<
 * 
 *         # Allocate the underlying class
 */
  __pyx_t_1 = __pyx_v_aero->ob_mpi;
  __pyx_v_aero_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":1041
 * 
 *         # Allocate the underlying class
 *         self.ptr = new RBF(c_comm, struct_comm, struct_root,             # <<<<<<<<<<<<<<
 *                            aero_comm, aero_root,
 *                            rbf_type, sampling_ratio)
 */
  __pyx_v_self->__pyx_base.ptr = new RBF(__pyx_v_c_comm, __pyx_v_struct_comm, __pyx_v_struct_root, __pyx_v_aero_comm, __pyx_v_aero_root, __pyx_v_rbf_type, __pyx_v_sampling_ratio);

  /* "funtofem/TransferScheme.pyx":1045
 *                            rbf_type, sampling_ratio)
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":1016
 *         from each node)
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":1047
 *         return
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8funtofem_14TransferScheme_5pyRBF_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8funtofem_14TransferScheme_5pyRBF_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8funtofem_14TransferScheme_5pyRBF_2__dealloc__(((struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8funtofem_14TransferScheme_5pyRBF_2__dealloc__(struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "funtofem/TransferScheme.pyx":1048
 * 
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 * 
 * cdef class pyBeamTransfer(pyTransferScheme):
 */
  delete __pyx_v_self->__pyx_base.ptr;

  /* "funtofem/TransferScheme.pyx":1047
 *         return
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_5pyRBF_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_5pyRBF_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_5pyRBF_4__reduce_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_5pyRBF_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyRBF.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_5pyRBF_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_5pyRBF_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_5pyRBF_6__setstate_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_5pyRBF_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyRBF *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyRBF.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "funtofem/TransferScheme.pyx":1054
 *     Interpolation of loads and displacements for beam elements
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

/* Python wrapper */
static int __pyx_pw_8funtofem_14TransferScheme_14pyBeamTransfer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8funtofem_14TransferScheme_14pyBeamTransfer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyMPICommObject *__pyx_v_comm = 0;
  struct PyMPICommObject *__pyx_v_struct = 0;
  int __pyx_v_struct_root;
  struct PyMPICommObject *__pyx_v_aero = 0;
  int __pyx_v_aero_root;
  PyArrayObject *__pyx_v_conn = 0;
  int __pyx_v_dof_per_node;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_comm,&__pyx_n_s_struct,&__pyx_n_s_struct_root,&__pyx_n_s_aero,&__pyx_n_s_aero_root,&__pyx_n_s_conn,&__pyx_n_s_dof_per_node,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_comm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 7, 1); __PYX_ERR(0, 1054, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 7, 2); __PYX_ERR(0, 1054, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 7, 3); __PYX_ERR(0, 1054, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aero_root)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 7, 4); __PYX_ERR(0, 1054, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 7, 5); __PYX_ERR(0, 1054, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dof_per_node);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1054, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_comm = ((struct PyMPICommObject *)values[0]);
    __pyx_v_struct = ((struct PyMPICommObject *)values[1]);
    __pyx_v_struct_root = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_struct_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1055, __pyx_L3_error)
    __pyx_v_aero = ((struct PyMPICommObject *)values[3]);
    __pyx_v_aero_root = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_aero_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1056, __pyx_L3_error)
    __pyx_v_conn = ((PyArrayObject *)values[5]);
    if (values[6]) {
      __pyx_v_dof_per_node = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_dof_per_node == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    } else {
      __pyx_v_dof_per_node = ((int)6);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1054, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("funtofem.TransferScheme.pyBeamTransfer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_comm), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "comm", 0))) __PYX_ERR(0, 1054, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "struct", 0))) __PYX_ERR(0, 1055, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aero), __pyx_ptype_6mpi4py_3MPI_Comm, 1, "aero", 0))) __PYX_ERR(0, 1056, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conn), __pyx_ptype_5numpy_ndarray, 1, "conn", 0))) __PYX_ERR(0, 1057, __pyx_L1_error)
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_14pyBeamTransfer___cinit__(((struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer *)__pyx_v_self), __pyx_v_comm, __pyx_v_struct, __pyx_v_struct_root, __pyx_v_aero, __pyx_v_aero_root, __pyx_v_conn, __pyx_v_dof_per_node);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8funtofem_14TransferScheme_14pyBeamTransfer___cinit__(struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer *__pyx_v_self, struct PyMPICommObject *__pyx_v_comm, struct PyMPICommObject *__pyx_v_struct, int __pyx_v_struct_root, struct PyMPICommObject *__pyx_v_aero, int __pyx_v_aero_root, PyArrayObject *__pyx_v_conn, int __pyx_v_dof_per_node) {
  MPI_Comm __pyx_v_c_comm;
  MPI_Comm __pyx_v_struct_comm;
  MPI_Comm __pyx_v_aero_comm;
  int *__pyx_v_conn_data;
  int __pyx_v_nelems;
  int __pyx_v_order;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_conn;
  __Pyx_Buffer __pyx_pybuffer_conn;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  MPI_Comm __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_conn.pybuffer.buf = NULL;
  __pyx_pybuffer_conn.refcount = 0;
  __pyx_pybuffernd_conn.data = NULL;
  __pyx_pybuffernd_conn.rcbuffer = &__pyx_pybuffer_conn;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_conn.rcbuffer->pybuffer, (PyObject*)__pyx_v_conn, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1054, __pyx_L1_error)
  }
  __pyx_pybuffernd_conn.diminfo[0].strides = __pyx_pybuffernd_conn.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_conn.diminfo[0].shape = __pyx_pybuffernd_conn.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_conn.diminfo[1].strides = __pyx_pybuffernd_conn.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_conn.diminfo[1].shape = __pyx_pybuffernd_conn.rcbuffer->pybuffer.shape[1];

  /* "funtofem/TransferScheme.pyx":1059
 *                   np.ndarray[int, ndim=2, mode='c'] conn,
 *                   int dof_per_node=6):
 *         cdef MPI_Comm c_comm = comm.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 */
  __pyx_t_1 = __pyx_v_comm->ob_mpi;
  __pyx_v_c_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":1060
 *                   int dof_per_node=6):
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 *         cdef int *conn_data = NULL
 */
  __pyx_t_1 = __pyx_v_struct->ob_mpi;
  __pyx_v_struct_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":1061
 *         cdef MPI_Comm c_comm = comm.ob_mpi
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi             # <<<<<<<<<<<<<<
 *         cdef int *conn_data = NULL
 *         cdef int nelems = 0
 */
  __pyx_t_1 = __pyx_v_aero->ob_mpi;
  __pyx_v_aero_comm = __pyx_t_1;

  /* "funtofem/TransferScheme.pyx":1062
 *         cdef MPI_Comm struct_comm = struct.ob_mpi
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 *         cdef int *conn_data = NULL             # <<<<<<<<<<<<<<
 *         cdef int nelems = 0
 *         cdef int order = 2
 */
  __pyx_v_conn_data = NULL;

  /* "funtofem/TransferScheme.pyx":1063
 *         cdef MPI_Comm aero_comm = aero.ob_mpi
 *         cdef int *conn_data = NULL
 *         cdef int nelems = 0             # <<<<<<<<<<<<<<
 *         cdef int order = 2
 * 
 */
  __pyx_v_nelems = 0;

  /* "funtofem/TransferScheme.pyx":1064
 *         cdef int *conn_data = NULL
 *         cdef int nelems = 0
 *         cdef int order = 2             # <<<<<<<<<<<<<<
 * 
 *         if conn is not None:
 */
  __pyx_v_order = 2;

  /* "funtofem/TransferScheme.pyx":1066
 *         cdef int order = 2
 * 
 *         if conn is not None:             # <<<<<<<<<<<<<<
 *             conn_data = <int*>conn.data
 *             nelems = conn.shape[0]
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_conn) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "funtofem/TransferScheme.pyx":1067
 * 
 *         if conn is not None:
 *             conn_data = <int*>conn.data             # <<<<<<<<<<<<<<
 *             nelems = conn.shape[0]
 *             order = conn.shape[1]
 */
    __pyx_v_conn_data = ((int *)__pyx_v_conn->data);

    /* "funtofem/TransferScheme.pyx":1068
 *         if conn is not None:
 *             conn_data = <int*>conn.data
 *             nelems = conn.shape[0]             # <<<<<<<<<<<<<<
 *             order = conn.shape[1]
 * 
 */
    __pyx_v_nelems = (__pyx_v_conn->dimensions[0]);

    /* "funtofem/TransferScheme.pyx":1069
 *             conn_data = <int*>conn.data
 *             nelems = conn.shape[0]
 *             order = conn.shape[1]             # <<<<<<<<<<<<<<
 * 
 *         self.ptr = new BeamTransfer(c_comm, struct_comm, struct_root,
 */
    __pyx_v_order = (__pyx_v_conn->dimensions[1]);

    /* "funtofem/TransferScheme.pyx":1066
 *         cdef int order = 2
 * 
 *         if conn is not None:             # <<<<<<<<<<<<<<
 *             conn_data = <int*>conn.data
 *             nelems = conn.shape[0]
 */
  }

  /* "funtofem/TransferScheme.pyx":1071
 *             order = conn.shape[1]
 * 
 *         self.ptr = new BeamTransfer(c_comm, struct_comm, struct_root,             # <<<<<<<<<<<<<<
 *                                     aero_comm, aero_root,
 *                                     conn_data, nelems, order,
 */
  __pyx_v_self->__pyx_base.ptr = new BeamTransfer(__pyx_v_c_comm, __pyx_v_struct_comm, __pyx_v_struct_root, __pyx_v_aero_comm, __pyx_v_aero_root, __pyx_v_conn_data, __pyx_v_nelems, __pyx_v_order, __pyx_v_dof_per_node);

  /* "funtofem/TransferScheme.pyx":1076
 *                                     dof_per_node)
 * 
 *         return             # <<<<<<<<<<<<<<
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "funtofem/TransferScheme.pyx":1054
 *     Interpolation of loads and displacements for beam elements
 *     """
 *     def __cinit__(self, MPI.Comm comm,             # <<<<<<<<<<<<<<
 *                   MPI.Comm struct, int struct_root,
 *                   MPI.Comm aero, int aero_root,
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_conn.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("funtofem.TransferScheme.pyBeamTransfer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_conn.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_14pyBeamTransfer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_14pyBeamTransfer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_14pyBeamTransfer_2__reduce_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_14pyBeamTransfer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyBeamTransfer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8funtofem_14TransferScheme_14pyBeamTransfer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8funtofem_14TransferScheme_14pyBeamTransfer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8funtofem_14TransferScheme_14pyBeamTransfer_4__setstate_cython__(((struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8funtofem_14TransferScheme_14pyBeamTransfer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("funtofem.TransferScheme.pyBeamTransfer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":929
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":930
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":933
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":935
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":936
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":942
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 942, __pyx_L3_error)

      /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":943
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 943, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 944, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 944, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":948
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 948, __pyx_L3_error)

      /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":949
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 949, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 950, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 950, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":954
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 954, __pyx_L3_error)

      /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":955
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 955, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":956
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 956, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 956, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":978
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":993
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":1003
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":1010
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":1017
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyTransferScheme(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8funtofem_14TransferScheme_pyTransferScheme(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8funtofem_14TransferScheme_pyTransferScheme[] = {
  {"setAeroNodes", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_1setAeroNodes, METH_O, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_setAeroNodes},
  {"setStructNodes", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_3setStructNodes, METH_O, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_2setStructNodes},
  {"initialize", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_5initialize, METH_NOARGS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_4initialize},
  {"transferDisps", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_7transferDisps, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_6transferDisps},
  {"transferLoads", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_9transferLoads, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_8transferLoads},
  {"applydDduS", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_11applydDduS, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_10applydDduS},
  {"applydDduSTrans", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_13applydDduSTrans, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_12applydDduSTrans},
  {"applydLduS", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_15applydLduS, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_14applydLduS},
  {"applydLduSTrans", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_17applydLduSTrans, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_16applydLduSTrans},
  {"applydLdfA", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_19applydLdfA, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_18applydLdfA},
  {"applydLdfATrans", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_21applydLdfATrans, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_20applydLdfATrans},
  {"applydDdxA0", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_23applydDdxA0, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_22applydDdxA0},
  {"applydDdxS0", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_25applydDdxS0, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_24applydDdxS0},
  {"applydLdxA0", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_27applydLdxA0, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_26applydLdxA0},
  {"applydLdxS0", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_29applydLdxS0, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_28applydLdxS0},
  {"testAllDerivatives", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_31testAllDerivatives, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_30testAllDerivatives},
  {"transformEquivRigidMotion", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_33transformEquivRigidMotion, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_32transformEquivRigidMotion},
  {"applydRduATrans", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_35applydRduATrans, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_34applydRduATrans},
  {"applydRdxA0Trans", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_37applydRdxA0Trans, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_16pyTransferScheme_36applydRdxA0Trans},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_39__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_16pyTransferScheme_41__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8funtofem_14TransferScheme_pyTransferScheme = {
  PyVarObject_HEAD_INIT(0, 0)
  "funtofem.TransferScheme.pyTransferScheme", /*tp_name*/
  sizeof(struct __pyx_obj_8funtofem_14TransferScheme_pyTransferScheme), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyTransferScheme, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Abstract class that defines the transfer scheme interface\n\n    Notes\n    -----\n    C++ extension must be compiled in complex mode in order to use complex\n    step approximation in test functions\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8funtofem_14TransferScheme_pyTransferScheme, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8funtofem_14TransferScheme_pyTransferScheme, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyThermalTransfer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8funtofem_14TransferScheme_pyThermalTransfer(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8funtofem_14TransferScheme_pyThermalTransfer[] = {
  {"setAeroNodes", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_1setAeroNodes, METH_O, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_setAeroNodes},
  {"setStructNodes", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_3setStructNodes, METH_O, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_2setStructNodes},
  {"initialize", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_5initialize, METH_NOARGS, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_4initialize},
  {"transferTemp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_7transferTemp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_6transferTemp},
  {"transferFlux", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_9transferFlux, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_8transferFlux},
  {"applydTdtS", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_11applydTdtS, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_10applydTdtS},
  {"applydTdtSTrans", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_13applydTdtSTrans, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_12applydTdtSTrans},
  {"applydQdqA", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_15applydQdqA, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_14applydQdqA},
  {"applydQdqATrans", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_17applydQdqATrans, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_16applydQdqATrans},
  {"testAllDerivatives", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_19testAllDerivatives, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8funtofem_14TransferScheme_17pyThermalTransfer_18testAllDerivatives},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_17pyThermalTransfer_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8funtofem_14TransferScheme_pyThermalTransfer = {
  PyVarObject_HEAD_INIT(0, 0)
  "funtofem.TransferScheme.pyThermalTransfer", /*tp_name*/
  sizeof(struct __pyx_obj_8funtofem_14TransferScheme_pyThermalTransfer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyThermalTransfer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Abstract class that defines the transfer scheme interface\n\n    Notes\n    -----\n    C++ extension must be compiled in complex mode in order to use complex\n    step approximation in test functions\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8funtofem_14TransferScheme_pyThermalTransfer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8funtofem_14TransferScheme_pyThermalTransfer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyMELD(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8funtofem_14TransferScheme_pyTransferScheme(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8funtofem_14TransferScheme_6pyMELD_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8funtofem_14TransferScheme_pyMELD(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8funtofem_14TransferScheme_6pyMELD_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyTransferScheme(o);
}

static PyMethodDef __pyx_methods_8funtofem_14TransferScheme_pyMELD[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_6pyMELD_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_6pyMELD_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8funtofem_14TransferScheme_pyMELD = {
  PyVarObject_HEAD_INIT(0, 0)
  "funtofem.TransferScheme.pyMELD", /*tp_name*/
  sizeof(struct __pyx_obj_8funtofem_14TransferScheme_pyMELD), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyMELD, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    MELD (Matching-based Extrapolation of Loads and Displacments) is scalable\n    scheme for transferring loads and displacements between large non-matching\n    aerodynamic and structural meshes. It connects each aerodynamic node to a\n    specified number of nearest structural nodes, and extrapolates its motion\n    from the connected structural nodes through the solution of a shape-matching\n    problem. The aerodynamic loads are extrapolated to the structural mesh in a\n    consistent and conservative manner, derived from the principle of virtual\n    work\n\n    Parameters\n    ----------\n    comm: MPI.comm\n        MPI communicator for all processes\n    struct: MPI.comm\n        MPI communicator for the structural root process\n    struct_root: int\n        id of the structural root process\n    aero: MPI.comm\n        MPI communicator for the aerodynamic root process\n    aero_root: int\n        id of the aerodynamic root process\n    symmetry: int\n        symmetry specifier (-1 for none, 0 for x-plane, 1 for y-plane,\n        2 for z-plane)\n    num_nearest: int\n        number of structural nodes linked to each aerodynamic node\n    beta: float\n        weighting decay parameter\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8funtofem_14TransferScheme_pyMELD, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8funtofem_14TransferScheme_pyMELD, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyMELDThermal(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8funtofem_14TransferScheme_pyThermalTransfer(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8funtofem_14TransferScheme_pyMELDThermal(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyThermalTransfer(o);
}

static PyMethodDef __pyx_methods_8funtofem_14TransferScheme_pyMELDThermal[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_13pyMELDThermal_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8funtofem_14TransferScheme_pyMELDThermal = {
  PyVarObject_HEAD_INIT(0, 0)
  "funtofem.TransferScheme.pyMELDThermal", /*tp_name*/
  sizeof(struct __pyx_obj_8funtofem_14TransferScheme_pyMELDThermal), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyMELDThermal, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    MELD (Matching-based Extrapolation of Loads and Displacments) is scalable\n    scheme for transferring loads and displacements between large non-matching\n    aerodynamic and structural meshes. It connects each aerodynamic node to a\n    specified number of nearest structural nodes, and extrapolates its motion\n    from the connected structural nodes through the solution of a shape-matching\n    problem. The aerodynamic loads are extrapolated to the structural mesh in a\n    consistent and conservative manner, derived from the principle of virtual\n    work\n\n    Version modified to transfer temperature and flux rather than load and displacement\n\n    Parameters\n    ----------\n    comm: MPI.comm\n        MPI communicator for all processes\n    struct: MPI.comm\n        MPI communicator for the structural root process\n    struct_root: int\n        id of the structural root process\n    aero: MPI.comm\n        MPI communicator for the aerodynamic root process\n    aero_root: int\n        id of the aerodynamic root process\n    symmetry: int\n        symmetry specifier (-1 for none, 0 for x-plane, 1 for y-plane,\n        2 for z-plane)\n    num_nearest: int\n        number of structural nodes linked to each aerodynamic node\n    beta: float\n        weighting decay parameter\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8funtofem_14TransferScheme_pyMELDThermal, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8funtofem_14TransferScheme_pyMELDThermal, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyLinearizedMELD(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8funtofem_14TransferScheme_pyTransferScheme(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8funtofem_14TransferScheme_pyLinearizedMELD(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyTransferScheme(o);
}

static PyMethodDef __pyx_methods_8funtofem_14TransferScheme_pyLinearizedMELD[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_16pyLinearizedMELD_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD = {
  PyVarObject_HEAD_INIT(0, 0)
  "funtofem.TransferScheme.pyLinearizedMELD", /*tp_name*/
  sizeof(struct __pyx_obj_8funtofem_14TransferScheme_pyLinearizedMELD), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyLinearizedMELD, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Linearized MELD is a transfer scheme developed from the MELD transfer scheme\n    assuming displacements tend to zero\n\n    Parameters\n    ----------\n    comm: MPI.comm\n        MPI communicator for all processes\n    struct: MPI.comm\n        MPI communicator for the structural root process\n    struct_root: int\n        id of the structural root process\n    aero: MPI.comm\n        MPI communicator for the aerodynamic root process\n    aero_root: int\n        id of the aerodynamic root process\n    symmetry: int\n        symmetry specifier (-1 for none, 0 for x-plane, 1 for y-plane,\n        2 for z-plane)\n    num_nearest: int\n        number of structural nodes linked to each aerodynamic node\n    beta: float\n        weighting decay parameter\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8funtofem_14TransferScheme_pyLinearizedMELD, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8funtofem_14TransferScheme_pyLinearizedMELD, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyRBF(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8funtofem_14TransferScheme_pyTransferScheme(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8funtofem_14TransferScheme_5pyRBF_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8funtofem_14TransferScheme_pyRBF(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8funtofem_14TransferScheme_5pyRBF_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyTransferScheme(o);
}

static PyMethodDef __pyx_methods_8funtofem_14TransferScheme_pyRBF[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_5pyRBF_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_5pyRBF_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8funtofem_14TransferScheme_pyRBF = {
  PyVarObject_HEAD_INIT(0, 0)
  "funtofem.TransferScheme.pyRBF", /*tp_name*/
  sizeof(struct __pyx_obj_8funtofem_14TransferScheme_pyRBF), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyRBF, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Interpolation of loads and displacements using radial basis functions (RBFs)\n\n    Parameters\n    ----------\n    comm: MPI.comm\n        MPI communicator for all processes\n    struct: MPI.comm\n        MPI communicator for the structural root process\n    struct_root: int\n        id of the structural root process\n    aero: MPI.comm\n        MPI communicator for the aerodynamic root process\n    aero_root: int\n        id of the aerodynamic root process\n    rbf_type: C++ enum\n        type of radial basis function to use (PY_GAUSSIAN, PY_MULTIQUADRIC,\n        PY_INVERSE_MULTIQUADRIC, PY_THIN_PLATE_SPLINE)\n    sampling_ratio: int\n        minimum number of points in leaf node of octree (one point sampled\n        from each node)\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8funtofem_14TransferScheme_pyRBF, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8funtofem_14TransferScheme_pyRBF, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8funtofem_14TransferScheme_pyBeamTransfer(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8funtofem_14TransferScheme_pyTransferScheme(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8funtofem_14TransferScheme_14pyBeamTransfer_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_8funtofem_14TransferScheme_pyBeamTransfer[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_14pyBeamTransfer_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8funtofem_14TransferScheme_14pyBeamTransfer_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8funtofem_14TransferScheme_pyBeamTransfer = {
  PyVarObject_HEAD_INIT(0, 0)
  "funtofem.TransferScheme.pyBeamTransfer", /*tp_name*/
  sizeof(struct __pyx_obj_8funtofem_14TransferScheme_pyBeamTransfer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8funtofem_14TransferScheme_pyTransferScheme, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Interpolation of loads and displacements for beam elements\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8funtofem_14TransferScheme_pyBeamTransfer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8funtofem_14TransferScheme_pyBeamTransfer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_TransferScheme(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_TransferScheme},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "TransferScheme",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Aerodynamic_array_incorrect_leng, __pyx_k_Aerodynamic_array_incorrect_leng, sizeof(__pyx_k_Aerodynamic_array_incorrect_leng), 0, 0, 1, 0},
  {&__pyx_kp_s_Aerodynamic_node_array_incorrect, __pyx_k_Aerodynamic_node_array_incorrect, sizeof(__pyx_k_Aerodynamic_node_array_incorrect), 0, 0, 1, 0},
  {&__pyx_n_s_F2F_NPY_SCALAR, __pyx_k_F2F_NPY_SCALAR, sizeof(__pyx_k_F2F_NPY_SCALAR), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Input_structural_array_incorrect, __pyx_k_Input_structural_array_incorrect, sizeof(__pyx_k_Input_structural_array_incorrect), 0, 0, 1, 0},
  {&__pyx_kp_s_Output_structural_array_incorrec, __pyx_k_Output_structural_array_incorrec, sizeof(__pyx_k_Output_structural_array_incorrec), 0, 0, 1, 0},
  {&__pyx_n_s_PY_GAUSSIAN, __pyx_k_PY_GAUSSIAN, sizeof(__pyx_k_PY_GAUSSIAN), 0, 0, 1, 1},
  {&__pyx_n_s_PY_INVERSE_MULTIQUADRIC, __pyx_k_PY_INVERSE_MULTIQUADRIC, sizeof(__pyx_k_PY_INVERSE_MULTIQUADRIC), 0, 0, 1, 1},
  {&__pyx_n_s_PY_MULTIQUADRIC, __pyx_k_PY_MULTIQUADRIC, sizeof(__pyx_k_PY_MULTIQUADRIC), 0, 0, 1, 1},
  {&__pyx_n_s_PY_THIN_PLATE_SPLINE, __pyx_k_PY_THIN_PLATE_SPLINE, sizeof(__pyx_k_PY_THIN_PLATE_SPLINE), 0, 0, 1, 1},
  {&__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},
  {&__pyx_kp_s_Structural_array_incorrect_lengt, __pyx_k_Structural_array_incorrect_lengt, sizeof(__pyx_k_Structural_array_incorrect_lengt), 0, 0, 1, 0},
  {&__pyx_kp_s_Structural_node_array_incorrect, __pyx_k_Structural_node_array_incorrect, sizeof(__pyx_k_Structural_node_array_incorrect), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_aero, __pyx_k_aero, sizeof(__pyx_k_aero), 0, 0, 1, 1},
  {&__pyx_n_s_aero_disps, __pyx_k_aero_disps, sizeof(__pyx_k_aero_disps), 0, 0, 1, 1},
  {&__pyx_n_s_aero_flux, __pyx_k_aero_flux, sizeof(__pyx_k_aero_flux), 0, 0, 1, 1},
  {&__pyx_n_s_aero_loads, __pyx_k_aero_loads, sizeof(__pyx_k_aero_loads), 0, 0, 1, 1},
  {&__pyx_n_s_aero_root, __pyx_k_aero_root, sizeof(__pyx_k_aero_root), 0, 0, 1, 1},
  {&__pyx_n_s_aero_temps, __pyx_k_aero_temps, sizeof(__pyx_k_aero_temps), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_atol, __pyx_k_atol, sizeof(__pyx_k_atol), 0, 0, 1, 1},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_comm, __pyx_k_comm, sizeof(__pyx_k_comm), 0, 0, 1, 1},
  {&__pyx_n_s_conn, __pyx_k_conn, sizeof(__pyx_k_conn), 0, 0, 1, 1},
  {&__pyx_n_s_dof_per_node, __pyx_k_dof_per_node, sizeof(__pyx_k_dof_per_node), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_num_nearest, __pyx_k_num_nearest, sizeof(__pyx_k_num_nearest), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_prods, __pyx_k_prods, sizeof(__pyx_k_prods), 0, 0, 1, 1},
  {&__pyx_n_s_pyBeamTransfer, __pyx_k_pyBeamTransfer, sizeof(__pyx_k_pyBeamTransfer), 0, 0, 1, 1},
  {&__pyx_n_s_pyLinearizedMELD, __pyx_k_pyLinearizedMELD, sizeof(__pyx_k_pyLinearizedMELD), 0, 0, 1, 1},
  {&__pyx_n_s_pyMELD, __pyx_k_pyMELD, sizeof(__pyx_k_pyMELD), 0, 0, 1, 1},
  {&__pyx_n_s_pyMELDThermal, __pyx_k_pyMELDThermal, sizeof(__pyx_k_pyMELDThermal), 0, 0, 1, 1},
  {&__pyx_n_s_pyRBF, __pyx_k_pyRBF, sizeof(__pyx_k_pyRBF), 0, 0, 1, 1},
  {&__pyx_n_s_pyThermalTransfer, __pyx_k_pyThermalTransfer, sizeof(__pyx_k_pyThermalTransfer), 0, 0, 1, 1},
  {&__pyx_n_s_pyTransferScheme, __pyx_k_pyTransferScheme, sizeof(__pyx_k_pyTransferScheme), 0, 0, 1, 1},
  {&__pyx_n_s_rbf_type, __pyx_k_rbf_type, sizeof(__pyx_k_rbf_type), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_rtol, __pyx_k_rtol, sizeof(__pyx_k_rtol), 0, 0, 1, 1},
  {&__pyx_n_s_sampling_ratio, __pyx_k_sampling_ratio, sizeof(__pyx_k_sampling_ratio), 0, 0, 1, 1},
  {&__pyx_kp_s_self_ptr_cannot_be_converted_to, __pyx_k_self_ptr_cannot_be_converted_to, sizeof(__pyx_k_self_ptr_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_struct_disps, __pyx_k_struct_disps, sizeof(__pyx_k_struct_disps), 0, 0, 1, 1},
  {&__pyx_n_s_struct_flux, __pyx_k_struct_flux, sizeof(__pyx_k_struct_flux), 0, 0, 1, 1},
  {&__pyx_n_s_struct_loads, __pyx_k_struct_loads, sizeof(__pyx_k_struct_loads), 0, 0, 1, 1},
  {&__pyx_n_s_struct_root, __pyx_k_struct_root, sizeof(__pyx_k_struct_root), 0, 0, 1, 1},
  {&__pyx_n_s_struct_temps, __pyx_k_struct_temps, sizeof(__pyx_k_struct_temps), 0, 0, 1, 1},
  {&__pyx_n_s_symmetry, __pyx_k_symmetry, sizeof(__pyx_k_symmetry), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_vecs, __pyx_k_vecs, sizeof(__pyx_k_vecs), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 112, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 944, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "funtofem/TransferScheme.pyx":112
 * 
 *         if struct_len != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Structural_array_incorrect_lengt); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "funtofem/TransferScheme.pyx":114
 *             raise ValueError("Structural array incorrect length")
 *         if aero_len != self.ptr.getLocalAeroArrayLen():
 *             raise ValueError("Aerodynamic array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.transferDisps(struct_array, aero_array)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Aerodynamic_array_incorrect_leng); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "funtofem/TransferScheme.pyx":248
 * 
 *         if struct_len1 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Input structural array incorrect length")             # <<<<<<<<<<<<<<
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Output structural array incorrect length")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Input_structural_array_incorrect); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "funtofem/TransferScheme.pyx":250
 *             raise ValueError("Input structural array incorrect length")
 *         if struct_len2 != self.ptr.getLocalStructArrayLen():
 *             raise ValueError("Output structural array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydLduS(struct_array1, struct_array2)
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Output_structural_array_incorrec); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "funtofem/TransferScheme.pyx":386
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xA0_len != 3 * self.ptr.getNumLocalAeroNodes():
 *             raise ValueError("Aerodynamic node array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydDdxA0(aero_array, xA0_array)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_Aerodynamic_node_array_incorrect); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "funtofem/TransferScheme.pyx":420
 *             raise ValueError("Aerodynamic array incorrect length")
 *         if xS0_len != 3 * self.ptr.getNumLocalStructNodes():
 *             raise ValueError("Structural node array incorrect length")             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.applydDdxS0(aero_array, xS0_array)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Structural_node_array_incorrect); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(2, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8funtofem_14TransferScheme_pyTransferScheme) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8funtofem_14TransferScheme_pyTransferScheme.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8funtofem_14TransferScheme_pyTransferScheme.tp_dictoffset && __pyx_type_8funtofem_14TransferScheme_pyTransferScheme.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8funtofem_14TransferScheme_pyTransferScheme.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTransferScheme, (PyObject *)&__pyx_type_8funtofem_14TransferScheme_pyTransferScheme) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8funtofem_14TransferScheme_pyTransferScheme) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __pyx_ptype_8funtofem_14TransferScheme_pyTransferScheme = &__pyx_type_8funtofem_14TransferScheme_pyTransferScheme;
  if (PyType_Ready(&__pyx_type_8funtofem_14TransferScheme_pyThermalTransfer) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8funtofem_14TransferScheme_pyThermalTransfer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8funtofem_14TransferScheme_pyThermalTransfer.tp_dictoffset && __pyx_type_8funtofem_14TransferScheme_pyThermalTransfer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8funtofem_14TransferScheme_pyThermalTransfer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyThermalTransfer, (PyObject *)&__pyx_type_8funtofem_14TransferScheme_pyThermalTransfer) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8funtofem_14TransferScheme_pyThermalTransfer) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  __pyx_ptype_8funtofem_14TransferScheme_pyThermalTransfer = &__pyx_type_8funtofem_14TransferScheme_pyThermalTransfer;
  __pyx_type_8funtofem_14TransferScheme_pyMELD.tp_base = __pyx_ptype_8funtofem_14TransferScheme_pyTransferScheme;
  if (PyType_Ready(&__pyx_type_8funtofem_14TransferScheme_pyMELD) < 0) __PYX_ERR(0, 843, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8funtofem_14TransferScheme_pyMELD.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8funtofem_14TransferScheme_pyMELD.tp_dictoffset && __pyx_type_8funtofem_14TransferScheme_pyMELD.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8funtofem_14TransferScheme_pyMELD.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyMELD, (PyObject *)&__pyx_type_8funtofem_14TransferScheme_pyMELD) < 0) __PYX_ERR(0, 843, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8funtofem_14TransferScheme_pyMELD) < 0) __PYX_ERR(0, 843, __pyx_L1_error)
  __pyx_ptype_8funtofem_14TransferScheme_pyMELD = &__pyx_type_8funtofem_14TransferScheme_pyMELD;
  __pyx_type_8funtofem_14TransferScheme_pyMELDThermal.tp_base = __pyx_ptype_8funtofem_14TransferScheme_pyThermalTransfer;
  if (PyType_Ready(&__pyx_type_8funtofem_14TransferScheme_pyMELDThermal) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8funtofem_14TransferScheme_pyMELDThermal.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8funtofem_14TransferScheme_pyMELDThermal.tp_dictoffset && __pyx_type_8funtofem_14TransferScheme_pyMELDThermal.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8funtofem_14TransferScheme_pyMELDThermal.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyMELDThermal, (PyObject *)&__pyx_type_8funtofem_14TransferScheme_pyMELDThermal) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8funtofem_14TransferScheme_pyMELDThermal) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  __pyx_ptype_8funtofem_14TransferScheme_pyMELDThermal = &__pyx_type_8funtofem_14TransferScheme_pyMELDThermal;
  __pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD.tp_base = __pyx_ptype_8funtofem_14TransferScheme_pyTransferScheme;
  if (PyType_Ready(&__pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD.tp_dictoffset && __pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyLinearizedMELD, (PyObject *)&__pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
  __pyx_ptype_8funtofem_14TransferScheme_pyLinearizedMELD = &__pyx_type_8funtofem_14TransferScheme_pyLinearizedMELD;
  __pyx_type_8funtofem_14TransferScheme_pyRBF.tp_base = __pyx_ptype_8funtofem_14TransferScheme_pyTransferScheme;
  if (PyType_Ready(&__pyx_type_8funtofem_14TransferScheme_pyRBF) < 0) __PYX_ERR(0, 993, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8funtofem_14TransferScheme_pyRBF.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8funtofem_14TransferScheme_pyRBF.tp_dictoffset && __pyx_type_8funtofem_14TransferScheme_pyRBF.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8funtofem_14TransferScheme_pyRBF.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyRBF, (PyObject *)&__pyx_type_8funtofem_14TransferScheme_pyRBF) < 0) __PYX_ERR(0, 993, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8funtofem_14TransferScheme_pyRBF) < 0) __PYX_ERR(0, 993, __pyx_L1_error)
  __pyx_ptype_8funtofem_14TransferScheme_pyRBF = &__pyx_type_8funtofem_14TransferScheme_pyRBF;
  __pyx_type_8funtofem_14TransferScheme_pyBeamTransfer.tp_base = __pyx_ptype_8funtofem_14TransferScheme_pyTransferScheme;
  if (PyType_Ready(&__pyx_type_8funtofem_14TransferScheme_pyBeamTransfer) < 0) __PYX_ERR(0, 1050, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8funtofem_14TransferScheme_pyBeamTransfer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8funtofem_14TransferScheme_pyBeamTransfer.tp_dictoffset && __pyx_type_8funtofem_14TransferScheme_pyBeamTransfer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8funtofem_14TransferScheme_pyBeamTransfer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyBeamTransfer, (PyObject *)&__pyx_type_8funtofem_14TransferScheme_pyBeamTransfer) < 0) __PYX_ERR(0, 1050, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8funtofem_14TransferScheme_pyBeamTransfer) < 0) __PYX_ERR(0, 1050, __pyx_L1_error)
  __pyx_ptype_8funtofem_14TransferScheme_pyBeamTransfer = &__pyx_type_8funtofem_14TransferScheme_pyBeamTransfer;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("mpi4py.MPI"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6mpi4py_3MPI_Datatype = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Datatype", sizeof(struct PyMPIDatatypeObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Datatype) __PYX_ERR(3, 28, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Status = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Status", sizeof(struct PyMPIStatusObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Status) __PYX_ERR(3, 36, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Request = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Request", sizeof(struct PyMPIRequestObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Request) __PYX_ERR(3, 44, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Prequest = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Prequest", sizeof(struct PyMPIPrequestObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Prequest) __PYX_ERR(3, 53, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Grequest = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Grequest", sizeof(struct PyMPIGrequestObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Grequest) __PYX_ERR(3, 59, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Message = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Message", sizeof(struct PyMPIMessageObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Message) __PYX_ERR(3, 65, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Op = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Op", sizeof(struct PyMPIOpObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Op) __PYX_ERR(3, 74, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Group = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Group", sizeof(struct PyMPIGroupObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Group) __PYX_ERR(3, 84, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Info = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Info", sizeof(struct PyMPIInfoObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Info) __PYX_ERR(3, 92, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Errhandler = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Errhandler", sizeof(struct PyMPIErrhandlerObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Errhandler) __PYX_ERR(3, 100, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Comm = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Comm", sizeof(struct PyMPICommObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Comm) __PYX_ERR(3, 108, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Intracomm = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Intracomm", sizeof(struct PyMPIIntracommObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Intracomm) __PYX_ERR(3, 116, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Topocomm = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Topocomm", sizeof(struct PyMPITopocommObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Topocomm) __PYX_ERR(3, 122, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Cartcomm = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Cartcomm", sizeof(struct PyMPICartcommObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Cartcomm) __PYX_ERR(3, 128, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Graphcomm = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Graphcomm", sizeof(struct PyMPIGraphcommObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Graphcomm) __PYX_ERR(3, 134, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Distgraphcomm = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Distgraphcomm", sizeof(struct PyMPIDistgraphcommObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Distgraphcomm) __PYX_ERR(3, 140, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Intercomm = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Intercomm", sizeof(struct PyMPIIntercommObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Intercomm) __PYX_ERR(3, 146, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_Win = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "Win", sizeof(struct PyMPIWinObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_Win) __PYX_ERR(3, 152, __pyx_L1_error)
  __pyx_ptype_6mpi4py_3MPI_File = __Pyx_ImportType(__pyx_t_1, "mpi4py.MPI", "File", sizeof(struct PyMPIFileObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6mpi4py_3MPI_File) __PYX_ERR(3, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 770, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 772, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 774, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 776, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 778, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 780, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 782, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 784, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 786, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 788, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initTransferScheme(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initTransferScheme(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_TransferScheme(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_TransferScheme(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_TransferScheme(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'TransferScheme' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_TransferScheme(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("TransferScheme", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_funtofem__TransferScheme) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "funtofem.TransferScheme")) {
      if (unlikely(PyDict_SetItemString(modules, "funtofem.TransferScheme", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "funtofem/TransferScheme.pyx":5
 * # For the use of MPI
 * 
 * __all__ = ["pyTransferScheme", "pyThermalTransfer", "pyMELD", "pyMELDThermal", "pyRBF", "pyLinearizedMELD", "pyBeamTransfer"]             # <<<<<<<<<<<<<<
 * 
 * from mpi4py.libmpi cimport *
 */
  __pyx_t_1 = PyList_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_pyTransferScheme);
  __Pyx_GIVEREF(__pyx_n_s_pyTransferScheme);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_pyTransferScheme);
  __Pyx_INCREF(__pyx_n_s_pyThermalTransfer);
  __Pyx_GIVEREF(__pyx_n_s_pyThermalTransfer);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_pyThermalTransfer);
  __Pyx_INCREF(__pyx_n_s_pyMELD);
  __Pyx_GIVEREF(__pyx_n_s_pyMELD);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_pyMELD);
  __Pyx_INCREF(__pyx_n_s_pyMELDThermal);
  __Pyx_GIVEREF(__pyx_n_s_pyMELDThermal);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_pyMELDThermal);
  __Pyx_INCREF(__pyx_n_s_pyRBF);
  __Pyx_GIVEREF(__pyx_n_s_pyRBF);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_pyRBF);
  __Pyx_INCREF(__pyx_n_s_pyLinearizedMELD);
  __Pyx_GIVEREF(__pyx_n_s_pyLinearizedMELD);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_pyLinearizedMELD);
  __Pyx_INCREF(__pyx_n_s_pyBeamTransfer);
  __Pyx_GIVEREF(__pyx_n_s_pyBeamTransfer);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_pyBeamTransfer);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "funtofem/TransferScheme.pyx":17
 * 
 * # Import numpy
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "funtofem/TransferScheme.pyx":21
 * 
 * # For the use of the numpy C API
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * # Include the definitions
 */
  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 21, __pyx_L1_error)

  /* "funtofem/FuntofemDefs.pxi":1
 * F2F_NPY_SCALAR = np.NPY_CDOUBLE             # <<<<<<<<<<<<<<
 * dtype = complex
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_F2F_NPY_SCALAR, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "funtofem/FuntofemDefs.pxi":2
 * F2F_NPY_SCALAR = np.NPY_CDOUBLE
 * dtype = complex             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dtype, ((PyObject *)(&PyComplex_Type))) < 0) __PYX_ERR(5, 2, __pyx_L1_error)

  /* "funtofem/TransferScheme.pyx":988
 *         del self.ptr
 * 
 * PY_GAUSSIAN = GAUSSIAN             # <<<<<<<<<<<<<<
 * PY_MULTIQUADRIC = MULTIQUADRIC
 * PY_INVERSE_MULTIQUADRIC = INVERSE_MULTIQUADRIC
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__RBF_3a__3a_RbfType(RBF::GAUSSIAN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PY_GAUSSIAN, __pyx_t_1) < 0) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "funtofem/TransferScheme.pyx":989
 * 
 * PY_GAUSSIAN = GAUSSIAN
 * PY_MULTIQUADRIC = MULTIQUADRIC             # <<<<<<<<<<<<<<
 * PY_INVERSE_MULTIQUADRIC = INVERSE_MULTIQUADRIC
 * PY_THIN_PLATE_SPLINE = THIN_PLATE_SPLINE
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__RBF_3a__3a_RbfType(RBF::MULTIQUADRIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PY_MULTIQUADRIC, __pyx_t_1) < 0) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "funtofem/TransferScheme.pyx":990
 * PY_GAUSSIAN = GAUSSIAN
 * PY_MULTIQUADRIC = MULTIQUADRIC
 * PY_INVERSE_MULTIQUADRIC = INVERSE_MULTIQUADRIC             # <<<<<<<<<<<<<<
 * PY_THIN_PLATE_SPLINE = THIN_PLATE_SPLINE
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__RBF_3a__3a_RbfType(RBF::INVERSE_MULTIQUADRIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PY_INVERSE_MULTIQUADRIC, __pyx_t_1) < 0) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "funtofem/TransferScheme.pyx":991
 * PY_MULTIQUADRIC = MULTIQUADRIC
 * PY_INVERSE_MULTIQUADRIC = INVERSE_MULTIQUADRIC
 * PY_THIN_PLATE_SPLINE = THIN_PLATE_SPLINE             # <<<<<<<<<<<<<<
 * 
 * cdef class pyRBF(pyTransferScheme):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__RBF_3a__3a_RbfType(RBF::THIN_PLATE_SPLINE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PY_THIN_PLATE_SPLINE, __pyx_t_1) < 0) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "funtofem/TransferScheme.pyx":1
 * #!/bin/python             # <<<<<<<<<<<<<<
 * # distutils: language=c++
 * # For the use of MPI
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../anaconda3/envs/F2F/lib/python3.9/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init funtofem.TransferScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init funtofem.TransferScheme");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* DivInt[Py_ssize_t] */
  static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseArgTupleInvalid */
  static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
  static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
  static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyDictVersioning */
  #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* FromPy */
  static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__RBF_3a__3a_RbfType(enum RBF::RbfType value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum RBF::RbfType neg_one = (enum RBF::RbfType) -1, const_zero = (enum RBF::RbfType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum RBF::RbfType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum RBF::RbfType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum RBF::RbfType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum RBF::RbfType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum RBF::RbfType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum RBF::RbfType),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE enum RBF::RbfType __Pyx_PyInt_As_enum__RBF_3a__3a_RbfType(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum RBF::RbfType neg_one = (enum RBF::RbfType) -1, const_zero = (enum RBF::RbfType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum RBF::RbfType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum RBF::RbfType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum RBF::RbfType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum RBF::RbfType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum RBF::RbfType) >= 2 * PyLong_SHIFT) {
                            return (enum RBF::RbfType) (((((enum RBF::RbfType)digits[1]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum RBF::RbfType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum RBF::RbfType) >= 3 * PyLong_SHIFT) {
                            return (enum RBF::RbfType) (((((((enum RBF::RbfType)digits[2]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[1]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum RBF::RbfType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum RBF::RbfType) >= 4 * PyLong_SHIFT) {
                            return (enum RBF::RbfType) (((((((((enum RBF::RbfType)digits[3]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[2]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[1]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum RBF::RbfType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum RBF::RbfType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum RBF::RbfType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum RBF::RbfType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum RBF::RbfType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum RBF::RbfType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum RBF::RbfType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum RBF::RbfType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum RBF::RbfType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum RBF::RbfType) (((enum RBF::RbfType)-1)*(((((enum RBF::RbfType)digits[1]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum RBF::RbfType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum RBF::RbfType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum RBF::RbfType) ((((((enum RBF::RbfType)digits[1]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum RBF::RbfType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum RBF::RbfType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum RBF::RbfType) (((enum RBF::RbfType)-1)*(((((((enum RBF::RbfType)digits[2]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[1]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum RBF::RbfType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum RBF::RbfType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum RBF::RbfType) ((((((((enum RBF::RbfType)digits[2]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[1]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum RBF::RbfType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum RBF::RbfType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum RBF::RbfType) (((enum RBF::RbfType)-1)*(((((((((enum RBF::RbfType)digits[3]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[2]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[1]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum RBF::RbfType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum RBF::RbfType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum RBF::RbfType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum RBF::RbfType) ((((((((((enum RBF::RbfType)digits[3]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[2]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[1]) << PyLong_SHIFT) | (enum RBF::RbfType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum RBF::RbfType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum RBF::RbfType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum RBF::RbfType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum RBF::RbfType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum RBF::RbfType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum RBF::RbfType) -1;
        }
    } else {
        enum RBF::RbfType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum RBF::RbfType) -1;
        val = __Pyx_PyInt_As_enum__RBF_3a__3a_RbfType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum RBF::RbfType");
    return (enum RBF::RbfType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum RBF::RbfType");
    return (enum RBF::RbfType) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
